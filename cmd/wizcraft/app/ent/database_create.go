// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DatabaseCreate is the builder for creating a Database entity.
type DatabaseCreate struct {
	config
	mutation *DatabaseMutation
	hooks    []Hook
}

// SetConnectionPath sets the "connection_path" field.
func (dc *DatabaseCreate) SetConnectionPath(s string) *DatabaseCreate {
	dc.mutation.SetConnectionPath(s)
	return dc
}

// SetPassword sets the "password" field.
func (dc *DatabaseCreate) SetPassword(s string) *DatabaseCreate {
	dc.mutation.SetPassword(s)
	return dc
}

// SetDbType sets the "db_type" field.
func (dc *DatabaseCreate) SetDbType(s string) *DatabaseCreate {
	dc.mutation.SetDbType(s)
	return dc
}

// SetID sets the "id" field.
func (dc *DatabaseCreate) SetID(u uuid.UUID) *DatabaseCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DatabaseCreate) SetNillableID(u *uuid.UUID) *DatabaseCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (dc *DatabaseCreate) SetServiceID(id uuid.UUID) *DatabaseCreate {
	dc.mutation.SetServiceID(id)
	return dc
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (dc *DatabaseCreate) SetNillableServiceID(id *uuid.UUID) *DatabaseCreate {
	if id != nil {
		dc = dc.SetServiceID(*id)
	}
	return dc
}

// SetService sets the "service" edge to the Service entity.
func (dc *DatabaseCreate) SetService(s *Service) *DatabaseCreate {
	return dc.SetServiceID(s.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (dc *DatabaseCreate) SetProjectID(id uuid.UUID) *DatabaseCreate {
	dc.mutation.SetProjectID(id)
	return dc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (dc *DatabaseCreate) SetNillableProjectID(id *uuid.UUID) *DatabaseCreate {
	if id != nil {
		dc = dc.SetProjectID(*id)
	}
	return dc
}

// SetProject sets the "project" edge to the Project entity.
func (dc *DatabaseCreate) SetProject(p *Project) *DatabaseCreate {
	return dc.SetProjectID(p.ID)
}

// SetGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID.
func (dc *DatabaseCreate) SetGeneralspecID(id int) *DatabaseCreate {
	dc.mutation.SetGeneralspecID(id)
	return dc
}

// SetNillableGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID if the given value is not nil.
func (dc *DatabaseCreate) SetNillableGeneralspecID(id *int) *DatabaseCreate {
	if id != nil {
		dc = dc.SetGeneralspecID(*id)
	}
	return dc
}

// SetGeneralspec sets the "generalspec" edge to the GeneralSpec entity.
func (dc *DatabaseCreate) SetGeneralspec(g *GeneralSpec) *DatabaseCreate {
	return dc.SetGeneralspecID(g.ID)
}

// Mutation returns the DatabaseMutation object of the builder.
func (dc *DatabaseCreate) Mutation() *DatabaseMutation {
	return dc.mutation
}

// Save creates the Database in the database.
func (dc *DatabaseCreate) Save(ctx context.Context) (*Database, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DatabaseCreate) SaveX(ctx context.Context) *Database {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DatabaseCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DatabaseCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DatabaseCreate) defaults() {
	if _, ok := dc.mutation.ID(); !ok {
		v := database.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DatabaseCreate) check() error {
	if _, ok := dc.mutation.ConnectionPath(); !ok {
		return &ValidationError{Name: "connection_path", err: errors.New(`ent: missing required field "Database.connection_path"`)}
	}
	if v, ok := dc.mutation.ConnectionPath(); ok {
		if err := database.ConnectionPathValidator(v); err != nil {
			return &ValidationError{Name: "connection_path", err: fmt.Errorf(`ent: validator failed for field "Database.connection_path": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Database.password"`)}
	}
	if _, ok := dc.mutation.DbType(); !ok {
		return &ValidationError{Name: "db_type", err: errors.New(`ent: missing required field "Database.db_type"`)}
	}
	if v, ok := dc.mutation.DbType(); ok {
		if err := database.DbTypeValidator(v); err != nil {
			return &ValidationError{Name: "db_type", err: fmt.Errorf(`ent: validator failed for field "Database.db_type": %w`, err)}
		}
	}
	return nil
}

func (dc *DatabaseCreate) sqlSave(ctx context.Context) (*Database, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DatabaseCreate) createSpec() (*Database, *sqlgraph.CreateSpec) {
	var (
		_node = &Database{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(database.Table, sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.ConnectionPath(); ok {
		_spec.SetField(database.FieldConnectionPath, field.TypeString, value)
		_node.ConnectionPath = value
	}
	if value, ok := dc.mutation.Password(); ok {
		_spec.SetField(database.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := dc.mutation.DbType(); ok {
		_spec.SetField(database.FieldDbType, field.TypeString, value)
		_node.DbType = value
	}
	if nodes := dc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   database.ServiceTable,
			Columns: []string{database.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_databases = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   database.ProjectTable,
			Columns: []string{database.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_databases = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.GeneralspecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   database.GeneralspecTable,
			Columns: []string{database.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.general_spec_database = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DatabaseCreateBulk is the builder for creating many Database entities in bulk.
type DatabaseCreateBulk struct {
	config
	err      error
	builders []*DatabaseCreate
}

// Save creates the Database entities in the database.
func (dcb *DatabaseCreateBulk) Save(ctx context.Context) ([]*Database, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Database, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DatabaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DatabaseCreateBulk) SaveX(ctx context.Context) []*Database {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DatabaseCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DatabaseCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
