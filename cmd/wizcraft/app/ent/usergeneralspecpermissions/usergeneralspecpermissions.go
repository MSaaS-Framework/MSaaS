// Code generated by ent, DO NOT EDIT.

package usergeneralspecpermissions

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the usergeneralspecpermissions type in the database.
	Label = "user_general_spec_permissions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPermission holds the string denoting the permission field in the database.
	FieldPermission = "permission"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeGeneralSpec holds the string denoting the general_spec edge name in mutations.
	EdgeGeneralSpec = "general_spec"
	// Table holds the table name of the usergeneralspecpermissions in the database.
	Table = "user_general_spec_permissions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_general_spec_permissions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_permissions"
	// GeneralSpecTable is the table that holds the general_spec relation/edge.
	GeneralSpecTable = "user_general_spec_permissions"
	// GeneralSpecInverseTable is the table name for the GeneralSpec entity.
	// It exists in this package in order to avoid circular dependency with the "generalspec" package.
	GeneralSpecInverseTable = "general_specs"
	// GeneralSpecColumn is the table column denoting the general_spec relation/edge.
	GeneralSpecColumn = "general_spec_permissions"
)

// Columns holds all SQL columns for usergeneralspecpermissions fields.
var Columns = []string{
	FieldID,
	FieldPermission,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_general_spec_permissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"general_spec_permissions",
	"user_permissions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Permission defines the type for the "permission" enum field.
type Permission string

// PermissionRead is the default value of the Permission enum.
const DefaultPermission = PermissionRead

// Permission values.
const (
	PermissionRead   Permission = "read"
	PermissionWrite  Permission = "write"
	PermissionManage Permission = "manage"
)

func (pe Permission) String() string {
	return string(pe)
}

// PermissionValidator is a validator for the "permission" field enum values. It is called by the builders before save.
func PermissionValidator(pe Permission) error {
	switch pe {
	case PermissionRead, PermissionWrite, PermissionManage:
		return nil
	default:
		return fmt.Errorf("usergeneralspecpermissions: invalid enum value for permission field: %q", pe)
	}
}

// OrderOption defines the ordering options for the UserGeneralSpecPermissions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPermission orders the results by the permission field.
func ByPermission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermission, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByGeneralSpecField orders the results by general_spec field.
func ByGeneralSpecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGeneralSpecStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newGeneralSpecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GeneralSpecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GeneralSpecTable, GeneralSpecColumn),
	)
}
