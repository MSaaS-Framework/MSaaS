// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// APISpecUpdate is the builder for updating APISpec entities.
type APISpecUpdate struct {
	config
	hooks    []Hook
	mutation *APISpecMutation
}

// Where appends a list predicates to the APISpecUpdate builder.
func (asu *APISpecUpdate) Where(ps ...predicate.APISpec) *APISpecUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetOpenapiSpec sets the "openapi_spec" field.
func (asu *APISpecUpdate) SetOpenapiSpec(u []uint8) *APISpecUpdate {
	asu.mutation.SetOpenapiSpec(u)
	return asu
}

// AppendOpenapiSpec appends u to the "openapi_spec" field.
func (asu *APISpecUpdate) AppendOpenapiSpec(u []uint8) *APISpecUpdate {
	asu.mutation.AppendOpenapiSpec(u)
	return asu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (asu *APISpecUpdate) SetServiceID(id uuid.UUID) *APISpecUpdate {
	asu.mutation.SetServiceID(id)
	return asu
}

// SetService sets the "service" edge to the Service entity.
func (asu *APISpecUpdate) SetService(s *Service) *APISpecUpdate {
	return asu.SetServiceID(s.ID)
}

// SetGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID.
func (asu *APISpecUpdate) SetGeneralspecID(id int) *APISpecUpdate {
	asu.mutation.SetGeneralspecID(id)
	return asu
}

// SetGeneralspec sets the "generalspec" edge to the GeneralSpec entity.
func (asu *APISpecUpdate) SetGeneralspec(g *GeneralSpec) *APISpecUpdate {
	return asu.SetGeneralspecID(g.ID)
}

// Mutation returns the APISpecMutation object of the builder.
func (asu *APISpecUpdate) Mutation() *APISpecMutation {
	return asu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (asu *APISpecUpdate) ClearService() *APISpecUpdate {
	asu.mutation.ClearService()
	return asu
}

// ClearGeneralspec clears the "generalspec" edge to the GeneralSpec entity.
func (asu *APISpecUpdate) ClearGeneralspec() *APISpecUpdate {
	asu.mutation.ClearGeneralspec()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *APISpecUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *APISpecUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *APISpecUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *APISpecUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *APISpecUpdate) check() error {
	if asu.mutation.ServiceCleared() && len(asu.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APISpec.service"`)
	}
	if asu.mutation.GeneralspecCleared() && len(asu.mutation.GeneralspecIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APISpec.generalspec"`)
	}
	return nil
}

func (asu *APISpecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apispec.Table, apispec.Columns, sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.OpenapiSpec(); ok {
		_spec.SetField(apispec.FieldOpenapiSpec, field.TypeJSON, value)
	}
	if value, ok := asu.mutation.AppendedOpenapiSpec(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apispec.FieldOpenapiSpec, value)
		})
	}
	if asu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.ServiceTable,
			Columns: []string{apispec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.ServiceTable,
			Columns: []string{apispec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.GeneralspecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.GeneralspecTable,
			Columns: []string{apispec.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.GeneralspecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.GeneralspecTable,
			Columns: []string{apispec.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apispec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// APISpecUpdateOne is the builder for updating a single APISpec entity.
type APISpecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APISpecMutation
}

// SetOpenapiSpec sets the "openapi_spec" field.
func (asuo *APISpecUpdateOne) SetOpenapiSpec(u []uint8) *APISpecUpdateOne {
	asuo.mutation.SetOpenapiSpec(u)
	return asuo
}

// AppendOpenapiSpec appends u to the "openapi_spec" field.
func (asuo *APISpecUpdateOne) AppendOpenapiSpec(u []uint8) *APISpecUpdateOne {
	asuo.mutation.AppendOpenapiSpec(u)
	return asuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (asuo *APISpecUpdateOne) SetServiceID(id uuid.UUID) *APISpecUpdateOne {
	asuo.mutation.SetServiceID(id)
	return asuo
}

// SetService sets the "service" edge to the Service entity.
func (asuo *APISpecUpdateOne) SetService(s *Service) *APISpecUpdateOne {
	return asuo.SetServiceID(s.ID)
}

// SetGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID.
func (asuo *APISpecUpdateOne) SetGeneralspecID(id int) *APISpecUpdateOne {
	asuo.mutation.SetGeneralspecID(id)
	return asuo
}

// SetGeneralspec sets the "generalspec" edge to the GeneralSpec entity.
func (asuo *APISpecUpdateOne) SetGeneralspec(g *GeneralSpec) *APISpecUpdateOne {
	return asuo.SetGeneralspecID(g.ID)
}

// Mutation returns the APISpecMutation object of the builder.
func (asuo *APISpecUpdateOne) Mutation() *APISpecMutation {
	return asuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (asuo *APISpecUpdateOne) ClearService() *APISpecUpdateOne {
	asuo.mutation.ClearService()
	return asuo
}

// ClearGeneralspec clears the "generalspec" edge to the GeneralSpec entity.
func (asuo *APISpecUpdateOne) ClearGeneralspec() *APISpecUpdateOne {
	asuo.mutation.ClearGeneralspec()
	return asuo
}

// Where appends a list predicates to the APISpecUpdate builder.
func (asuo *APISpecUpdateOne) Where(ps ...predicate.APISpec) *APISpecUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *APISpecUpdateOne) Select(field string, fields ...string) *APISpecUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated APISpec entity.
func (asuo *APISpecUpdateOne) Save(ctx context.Context) (*APISpec, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *APISpecUpdateOne) SaveX(ctx context.Context) *APISpec {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *APISpecUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *APISpecUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *APISpecUpdateOne) check() error {
	if asuo.mutation.ServiceCleared() && len(asuo.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APISpec.service"`)
	}
	if asuo.mutation.GeneralspecCleared() && len(asuo.mutation.GeneralspecIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APISpec.generalspec"`)
	}
	return nil
}

func (asuo *APISpecUpdateOne) sqlSave(ctx context.Context) (_node *APISpec, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apispec.Table, apispec.Columns, sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "APISpec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apispec.FieldID)
		for _, f := range fields {
			if !apispec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apispec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.OpenapiSpec(); ok {
		_spec.SetField(apispec.FieldOpenapiSpec, field.TypeJSON, value)
	}
	if value, ok := asuo.mutation.AppendedOpenapiSpec(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apispec.FieldOpenapiSpec, value)
		})
	}
	if asuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.ServiceTable,
			Columns: []string{apispec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.ServiceTable,
			Columns: []string{apispec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.GeneralspecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.GeneralspecTable,
			Columns: []string{apispec.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.GeneralspecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.GeneralspecTable,
			Columns: []string{apispec.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &APISpec{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apispec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
