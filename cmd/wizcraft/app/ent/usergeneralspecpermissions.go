// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/user"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/usergeneralspecpermissions"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserGeneralSpecPermissions is the model entity for the UserGeneralSpecPermissions schema.
type UserGeneralSpecPermissions struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Permission holds the value of the "permission" field.
	Permission usergeneralspecpermissions.Permission `json:"permission,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserGeneralSpecPermissionsQuery when eager-loading is set.
	Edges                    UserGeneralSpecPermissionsEdges `json:"edges"`
	general_spec_permissions *int
	user_permissions         *uuid.UUID
	selectValues             sql.SelectValues
}

// UserGeneralSpecPermissionsEdges holds the relations/edges for other nodes in the graph.
type UserGeneralSpecPermissionsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// GeneralSpec holds the value of the general_spec edge.
	GeneralSpec *GeneralSpec `json:"general_spec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserGeneralSpecPermissionsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GeneralSpecOrErr returns the GeneralSpec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserGeneralSpecPermissionsEdges) GeneralSpecOrErr() (*GeneralSpec, error) {
	if e.GeneralSpec != nil {
		return e.GeneralSpec, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: generalspec.Label}
	}
	return nil, &NotLoadedError{edge: "general_spec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserGeneralSpecPermissions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usergeneralspecpermissions.FieldPermission:
			values[i] = new(sql.NullString)
		case usergeneralspecpermissions.FieldID:
			values[i] = new(uuid.UUID)
		case usergeneralspecpermissions.ForeignKeys[0]: // general_spec_permissions
			values[i] = new(sql.NullInt64)
		case usergeneralspecpermissions.ForeignKeys[1]: // user_permissions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserGeneralSpecPermissions fields.
func (ugsp *UserGeneralSpecPermissions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usergeneralspecpermissions.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ugsp.ID = *value
			}
		case usergeneralspecpermissions.FieldPermission:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission", values[i])
			} else if value.Valid {
				ugsp.Permission = usergeneralspecpermissions.Permission(value.String)
			}
		case usergeneralspecpermissions.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field general_spec_permissions", value)
			} else if value.Valid {
				ugsp.general_spec_permissions = new(int)
				*ugsp.general_spec_permissions = int(value.Int64)
			}
		case usergeneralspecpermissions.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_permissions", values[i])
			} else if value.Valid {
				ugsp.user_permissions = new(uuid.UUID)
				*ugsp.user_permissions = *value.S.(*uuid.UUID)
			}
		default:
			ugsp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserGeneralSpecPermissions.
// This includes values selected through modifiers, order, etc.
func (ugsp *UserGeneralSpecPermissions) Value(name string) (ent.Value, error) {
	return ugsp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserGeneralSpecPermissions entity.
func (ugsp *UserGeneralSpecPermissions) QueryUser() *UserQuery {
	return NewUserGeneralSpecPermissionsClient(ugsp.config).QueryUser(ugsp)
}

// QueryGeneralSpec queries the "general_spec" edge of the UserGeneralSpecPermissions entity.
func (ugsp *UserGeneralSpecPermissions) QueryGeneralSpec() *GeneralSpecQuery {
	return NewUserGeneralSpecPermissionsClient(ugsp.config).QueryGeneralSpec(ugsp)
}

// Update returns a builder for updating this UserGeneralSpecPermissions.
// Note that you need to call UserGeneralSpecPermissions.Unwrap() before calling this method if this UserGeneralSpecPermissions
// was returned from a transaction, and the transaction was committed or rolled back.
func (ugsp *UserGeneralSpecPermissions) Update() *UserGeneralSpecPermissionsUpdateOne {
	return NewUserGeneralSpecPermissionsClient(ugsp.config).UpdateOne(ugsp)
}

// Unwrap unwraps the UserGeneralSpecPermissions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ugsp *UserGeneralSpecPermissions) Unwrap() *UserGeneralSpecPermissions {
	_tx, ok := ugsp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserGeneralSpecPermissions is not a transactional entity")
	}
	ugsp.config.driver = _tx.drv
	return ugsp
}

// String implements the fmt.Stringer.
func (ugsp *UserGeneralSpecPermissions) String() string {
	var builder strings.Builder
	builder.WriteString("UserGeneralSpecPermissions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ugsp.ID))
	builder.WriteString("permission=")
	builder.WriteString(fmt.Sprintf("%v", ugsp.Permission))
	builder.WriteByte(')')
	return builder.String()
}

// UserGeneralSpecPermissionsSlice is a parsable slice of UserGeneralSpecPermissions.
type UserGeneralSpecPermissionsSlice []*UserGeneralSpecPermissions
