// Code generated by ent, DO NOT EDIT.

package generalspec

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldUUID, v))
}

// ProjectUUID applies equality check predicate on the "project_uuid" field. It's identical to ProjectUUIDEQ.
func ProjectUUID(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldProjectUUID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldStatus, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldDescription, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLTE(FieldUUID, v))
}

// ProjectUUIDEQ applies the EQ predicate on the "project_uuid" field.
func ProjectUUIDEQ(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldProjectUUID, v))
}

// ProjectUUIDNEQ applies the NEQ predicate on the "project_uuid" field.
func ProjectUUIDNEQ(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNEQ(FieldProjectUUID, v))
}

// ProjectUUIDIn applies the In predicate on the "project_uuid" field.
func ProjectUUIDIn(vs ...uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldIn(FieldProjectUUID, vs...))
}

// ProjectUUIDNotIn applies the NotIn predicate on the "project_uuid" field.
func ProjectUUIDNotIn(vs ...uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNotIn(FieldProjectUUID, vs...))
}

// ProjectUUIDGT applies the GT predicate on the "project_uuid" field.
func ProjectUUIDGT(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGT(FieldProjectUUID, v))
}

// ProjectUUIDGTE applies the GTE predicate on the "project_uuid" field.
func ProjectUUIDGTE(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGTE(FieldProjectUUID, v))
}

// ProjectUUIDLT applies the LT predicate on the "project_uuid" field.
func ProjectUUIDLT(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLT(FieldProjectUUID, v))
}

// ProjectUUIDLTE applies the LTE predicate on the "project_uuid" field.
func ProjectUUIDLTE(v uuid.UUID) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLTE(FieldProjectUUID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContainsFold(FieldStatus, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.FieldContainsFold(FieldDescription, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDatabase applies the HasEdge predicate on the "database" edge.
func HasDatabase() predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DatabaseTable, DatabaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDatabaseWith applies the HasEdge predicate on the "database" edge with a given conditions (other predicates).
func HasDatabaseWith(preds ...predicate.Database) predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := newDatabaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApispec applies the HasEdge predicate on the "apispec" edge.
func HasApispec() predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ApispecTable, ApispecColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApispecWith applies the HasEdge predicate on the "apispec" edge with a given conditions (other predicates).
func HasApispecWith(preds ...predicate.APISpec) predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := newApispecStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissions applies the HasEdge predicate on the "permissions" edge.
func HasPermissions() predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PermissionsTable, PermissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionsWith applies the HasEdge predicate on the "permissions" edge with a given conditions (other predicates).
func HasPermissionsWith(preds ...predicate.UserGeneralSpecPermissions) predicate.GeneralSpec {
	return predicate.GeneralSpec(func(s *sql.Selector) {
		step := newPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GeneralSpec) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GeneralSpec) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GeneralSpec) predicate.GeneralSpec {
	return predicate.GeneralSpec(sql.NotPredicates(p))
}
