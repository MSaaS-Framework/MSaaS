// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/user"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/usergeneralspecpermissions"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserGeneralSpecPermissionsUpdate is the builder for updating UserGeneralSpecPermissions entities.
type UserGeneralSpecPermissionsUpdate struct {
	config
	hooks    []Hook
	mutation *UserGeneralSpecPermissionsMutation
}

// Where appends a list predicates to the UserGeneralSpecPermissionsUpdate builder.
func (ugspu *UserGeneralSpecPermissionsUpdate) Where(ps ...predicate.UserGeneralSpecPermissions) *UserGeneralSpecPermissionsUpdate {
	ugspu.mutation.Where(ps...)
	return ugspu
}

// SetPermission sets the "permission" field.
func (ugspu *UserGeneralSpecPermissionsUpdate) SetPermission(u usergeneralspecpermissions.Permission) *UserGeneralSpecPermissionsUpdate {
	ugspu.mutation.SetPermission(u)
	return ugspu
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (ugspu *UserGeneralSpecPermissionsUpdate) SetNillablePermission(u *usergeneralspecpermissions.Permission) *UserGeneralSpecPermissionsUpdate {
	if u != nil {
		ugspu.SetPermission(*u)
	}
	return ugspu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ugspu *UserGeneralSpecPermissionsUpdate) SetUserID(id uuid.UUID) *UserGeneralSpecPermissionsUpdate {
	ugspu.mutation.SetUserID(id)
	return ugspu
}

// SetUser sets the "user" edge to the User entity.
func (ugspu *UserGeneralSpecPermissionsUpdate) SetUser(u *User) *UserGeneralSpecPermissionsUpdate {
	return ugspu.SetUserID(u.ID)
}

// SetGeneralSpecID sets the "general_spec" edge to the GeneralSpec entity by ID.
func (ugspu *UserGeneralSpecPermissionsUpdate) SetGeneralSpecID(id int) *UserGeneralSpecPermissionsUpdate {
	ugspu.mutation.SetGeneralSpecID(id)
	return ugspu
}

// SetGeneralSpec sets the "general_spec" edge to the GeneralSpec entity.
func (ugspu *UserGeneralSpecPermissionsUpdate) SetGeneralSpec(g *GeneralSpec) *UserGeneralSpecPermissionsUpdate {
	return ugspu.SetGeneralSpecID(g.ID)
}

// Mutation returns the UserGeneralSpecPermissionsMutation object of the builder.
func (ugspu *UserGeneralSpecPermissionsUpdate) Mutation() *UserGeneralSpecPermissionsMutation {
	return ugspu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ugspu *UserGeneralSpecPermissionsUpdate) ClearUser() *UserGeneralSpecPermissionsUpdate {
	ugspu.mutation.ClearUser()
	return ugspu
}

// ClearGeneralSpec clears the "general_spec" edge to the GeneralSpec entity.
func (ugspu *UserGeneralSpecPermissionsUpdate) ClearGeneralSpec() *UserGeneralSpecPermissionsUpdate {
	ugspu.mutation.ClearGeneralSpec()
	return ugspu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ugspu *UserGeneralSpecPermissionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ugspu.sqlSave, ugspu.mutation, ugspu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ugspu *UserGeneralSpecPermissionsUpdate) SaveX(ctx context.Context) int {
	affected, err := ugspu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ugspu *UserGeneralSpecPermissionsUpdate) Exec(ctx context.Context) error {
	_, err := ugspu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugspu *UserGeneralSpecPermissionsUpdate) ExecX(ctx context.Context) {
	if err := ugspu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugspu *UserGeneralSpecPermissionsUpdate) check() error {
	if v, ok := ugspu.mutation.Permission(); ok {
		if err := usergeneralspecpermissions.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`ent: validator failed for field "UserGeneralSpecPermissions.permission": %w`, err)}
		}
	}
	if ugspu.mutation.UserCleared() && len(ugspu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserGeneralSpecPermissions.user"`)
	}
	if ugspu.mutation.GeneralSpecCleared() && len(ugspu.mutation.GeneralSpecIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserGeneralSpecPermissions.general_spec"`)
	}
	return nil
}

func (ugspu *UserGeneralSpecPermissionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ugspu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usergeneralspecpermissions.Table, usergeneralspecpermissions.Columns, sqlgraph.NewFieldSpec(usergeneralspecpermissions.FieldID, field.TypeUUID))
	if ps := ugspu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ugspu.mutation.Permission(); ok {
		_spec.SetField(usergeneralspecpermissions.FieldPermission, field.TypeEnum, value)
	}
	if ugspu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.UserTable,
			Columns: []string{usergeneralspecpermissions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugspu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.UserTable,
			Columns: []string{usergeneralspecpermissions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ugspu.mutation.GeneralSpecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.GeneralSpecTable,
			Columns: []string{usergeneralspecpermissions.GeneralSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugspu.mutation.GeneralSpecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.GeneralSpecTable,
			Columns: []string{usergeneralspecpermissions.GeneralSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ugspu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usergeneralspecpermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ugspu.mutation.done = true
	return n, nil
}

// UserGeneralSpecPermissionsUpdateOne is the builder for updating a single UserGeneralSpecPermissions entity.
type UserGeneralSpecPermissionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserGeneralSpecPermissionsMutation
}

// SetPermission sets the "permission" field.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) SetPermission(u usergeneralspecpermissions.Permission) *UserGeneralSpecPermissionsUpdateOne {
	ugspuo.mutation.SetPermission(u)
	return ugspuo
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) SetNillablePermission(u *usergeneralspecpermissions.Permission) *UserGeneralSpecPermissionsUpdateOne {
	if u != nil {
		ugspuo.SetPermission(*u)
	}
	return ugspuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) SetUserID(id uuid.UUID) *UserGeneralSpecPermissionsUpdateOne {
	ugspuo.mutation.SetUserID(id)
	return ugspuo
}

// SetUser sets the "user" edge to the User entity.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) SetUser(u *User) *UserGeneralSpecPermissionsUpdateOne {
	return ugspuo.SetUserID(u.ID)
}

// SetGeneralSpecID sets the "general_spec" edge to the GeneralSpec entity by ID.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) SetGeneralSpecID(id int) *UserGeneralSpecPermissionsUpdateOne {
	ugspuo.mutation.SetGeneralSpecID(id)
	return ugspuo
}

// SetGeneralSpec sets the "general_spec" edge to the GeneralSpec entity.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) SetGeneralSpec(g *GeneralSpec) *UserGeneralSpecPermissionsUpdateOne {
	return ugspuo.SetGeneralSpecID(g.ID)
}

// Mutation returns the UserGeneralSpecPermissionsMutation object of the builder.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) Mutation() *UserGeneralSpecPermissionsMutation {
	return ugspuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) ClearUser() *UserGeneralSpecPermissionsUpdateOne {
	ugspuo.mutation.ClearUser()
	return ugspuo
}

// ClearGeneralSpec clears the "general_spec" edge to the GeneralSpec entity.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) ClearGeneralSpec() *UserGeneralSpecPermissionsUpdateOne {
	ugspuo.mutation.ClearGeneralSpec()
	return ugspuo
}

// Where appends a list predicates to the UserGeneralSpecPermissionsUpdate builder.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) Where(ps ...predicate.UserGeneralSpecPermissions) *UserGeneralSpecPermissionsUpdateOne {
	ugspuo.mutation.Where(ps...)
	return ugspuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) Select(field string, fields ...string) *UserGeneralSpecPermissionsUpdateOne {
	ugspuo.fields = append([]string{field}, fields...)
	return ugspuo
}

// Save executes the query and returns the updated UserGeneralSpecPermissions entity.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) Save(ctx context.Context) (*UserGeneralSpecPermissions, error) {
	return withHooks(ctx, ugspuo.sqlSave, ugspuo.mutation, ugspuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) SaveX(ctx context.Context) *UserGeneralSpecPermissions {
	node, err := ugspuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) Exec(ctx context.Context) error {
	_, err := ugspuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) ExecX(ctx context.Context) {
	if err := ugspuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugspuo *UserGeneralSpecPermissionsUpdateOne) check() error {
	if v, ok := ugspuo.mutation.Permission(); ok {
		if err := usergeneralspecpermissions.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`ent: validator failed for field "UserGeneralSpecPermissions.permission": %w`, err)}
		}
	}
	if ugspuo.mutation.UserCleared() && len(ugspuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserGeneralSpecPermissions.user"`)
	}
	if ugspuo.mutation.GeneralSpecCleared() && len(ugspuo.mutation.GeneralSpecIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserGeneralSpecPermissions.general_spec"`)
	}
	return nil
}

func (ugspuo *UserGeneralSpecPermissionsUpdateOne) sqlSave(ctx context.Context) (_node *UserGeneralSpecPermissions, err error) {
	if err := ugspuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usergeneralspecpermissions.Table, usergeneralspecpermissions.Columns, sqlgraph.NewFieldSpec(usergeneralspecpermissions.FieldID, field.TypeUUID))
	id, ok := ugspuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserGeneralSpecPermissions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ugspuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usergeneralspecpermissions.FieldID)
		for _, f := range fields {
			if !usergeneralspecpermissions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usergeneralspecpermissions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ugspuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ugspuo.mutation.Permission(); ok {
		_spec.SetField(usergeneralspecpermissions.FieldPermission, field.TypeEnum, value)
	}
	if ugspuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.UserTable,
			Columns: []string{usergeneralspecpermissions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugspuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.UserTable,
			Columns: []string{usergeneralspecpermissions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ugspuo.mutation.GeneralSpecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.GeneralSpecTable,
			Columns: []string{usergeneralspecpermissions.GeneralSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugspuo.mutation.GeneralSpecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.GeneralSpecTable,
			Columns: []string{usergeneralspecpermissions.GeneralSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserGeneralSpecPermissions{config: ugspuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ugspuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usergeneralspecpermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ugspuo.mutation.done = true
	return _node, nil
}
