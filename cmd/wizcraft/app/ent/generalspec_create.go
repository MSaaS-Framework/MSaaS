// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GeneralSpecCreate is the builder for creating a GeneralSpec entity.
type GeneralSpecCreate struct {
	config
	mutation *GeneralSpecMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (gsc *GeneralSpecCreate) SetUUID(u uuid.UUID) *GeneralSpecCreate {
	gsc.mutation.SetUUID(u)
	return gsc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (gsc *GeneralSpecCreate) SetNillableUUID(u *uuid.UUID) *GeneralSpecCreate {
	if u != nil {
		gsc.SetUUID(*u)
	}
	return gsc
}

// SetName sets the "name" field.
func (gsc *GeneralSpecCreate) SetName(s string) *GeneralSpecCreate {
	gsc.mutation.SetName(s)
	return gsc
}

// SetType sets the "type" field.
func (gsc *GeneralSpecCreate) SetType(s string) *GeneralSpecCreate {
	gsc.mutation.SetType(s)
	return gsc
}

// SetStatus sets the "status" field.
func (gsc *GeneralSpecCreate) SetStatus(s string) *GeneralSpecCreate {
	gsc.mutation.SetStatus(s)
	return gsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gsc *GeneralSpecCreate) SetNillableStatus(s *string) *GeneralSpecCreate {
	if s != nil {
		gsc.SetStatus(*s)
	}
	return gsc
}

// SetDescription sets the "description" field.
func (gsc *GeneralSpecCreate) SetDescription(s string) *GeneralSpecCreate {
	gsc.mutation.SetDescription(s)
	return gsc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (gsc *GeneralSpecCreate) SetServiceID(id uuid.UUID) *GeneralSpecCreate {
	gsc.mutation.SetServiceID(id)
	return gsc
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (gsc *GeneralSpecCreate) SetNillableServiceID(id *uuid.UUID) *GeneralSpecCreate {
	if id != nil {
		gsc = gsc.SetServiceID(*id)
	}
	return gsc
}

// SetService sets the "service" edge to the Service entity.
func (gsc *GeneralSpecCreate) SetService(s *Service) *GeneralSpecCreate {
	return gsc.SetServiceID(s.ID)
}

// SetDatabaseID sets the "database" edge to the Database entity by ID.
func (gsc *GeneralSpecCreate) SetDatabaseID(id uuid.UUID) *GeneralSpecCreate {
	gsc.mutation.SetDatabaseID(id)
	return gsc
}

// SetNillableDatabaseID sets the "database" edge to the Database entity by ID if the given value is not nil.
func (gsc *GeneralSpecCreate) SetNillableDatabaseID(id *uuid.UUID) *GeneralSpecCreate {
	if id != nil {
		gsc = gsc.SetDatabaseID(*id)
	}
	return gsc
}

// SetDatabase sets the "database" edge to the Database entity.
func (gsc *GeneralSpecCreate) SetDatabase(d *Database) *GeneralSpecCreate {
	return gsc.SetDatabaseID(d.ID)
}

// SetApispecID sets the "apispec" edge to the APISpec entity by ID.
func (gsc *GeneralSpecCreate) SetApispecID(id uuid.UUID) *GeneralSpecCreate {
	gsc.mutation.SetApispecID(id)
	return gsc
}

// SetNillableApispecID sets the "apispec" edge to the APISpec entity by ID if the given value is not nil.
func (gsc *GeneralSpecCreate) SetNillableApispecID(id *uuid.UUID) *GeneralSpecCreate {
	if id != nil {
		gsc = gsc.SetApispecID(*id)
	}
	return gsc
}

// SetApispec sets the "apispec" edge to the APISpec entity.
func (gsc *GeneralSpecCreate) SetApispec(a *APISpec) *GeneralSpecCreate {
	return gsc.SetApispecID(a.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (gsc *GeneralSpecCreate) SetProjectID(id uuid.UUID) *GeneralSpecCreate {
	gsc.mutation.SetProjectID(id)
	return gsc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (gsc *GeneralSpecCreate) SetNillableProjectID(id *uuid.UUID) *GeneralSpecCreate {
	if id != nil {
		gsc = gsc.SetProjectID(*id)
	}
	return gsc
}

// SetProject sets the "project" edge to the Project entity.
func (gsc *GeneralSpecCreate) SetProject(p *Project) *GeneralSpecCreate {
	return gsc.SetProjectID(p.ID)
}

// Mutation returns the GeneralSpecMutation object of the builder.
func (gsc *GeneralSpecCreate) Mutation() *GeneralSpecMutation {
	return gsc.mutation
}

// Save creates the GeneralSpec in the database.
func (gsc *GeneralSpecCreate) Save(ctx context.Context) (*GeneralSpec, error) {
	gsc.defaults()
	return withHooks(ctx, gsc.sqlSave, gsc.mutation, gsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GeneralSpecCreate) SaveX(ctx context.Context) *GeneralSpec {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GeneralSpecCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GeneralSpecCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GeneralSpecCreate) defaults() {
	if _, ok := gsc.mutation.UUID(); !ok {
		v := generalspec.DefaultUUID()
		gsc.mutation.SetUUID(v)
	}
	if _, ok := gsc.mutation.Status(); !ok {
		v := generalspec.DefaultStatus
		gsc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GeneralSpecCreate) check() error {
	if _, ok := gsc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "GeneralSpec.uuid"`)}
	}
	if _, ok := gsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "GeneralSpec.name"`)}
	}
	if _, ok := gsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "GeneralSpec.type"`)}
	}
	if _, ok := gsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "GeneralSpec.status"`)}
	}
	if _, ok := gsc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "GeneralSpec.description"`)}
	}
	return nil
}

func (gsc *GeneralSpecCreate) sqlSave(ctx context.Context) (*GeneralSpec, error) {
	if err := gsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gsc.mutation.id = &_node.ID
	gsc.mutation.done = true
	return _node, nil
}

func (gsc *GeneralSpecCreate) createSpec() (*GeneralSpec, *sqlgraph.CreateSpec) {
	var (
		_node = &GeneralSpec{config: gsc.config}
		_spec = sqlgraph.NewCreateSpec(generalspec.Table, sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt))
	)
	if value, ok := gsc.mutation.UUID(); ok {
		_spec.SetField(generalspec.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := gsc.mutation.Name(); ok {
		_spec.SetField(generalspec.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gsc.mutation.GetType(); ok {
		_spec.SetField(generalspec.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := gsc.mutation.Status(); ok {
		_spec.SetField(generalspec.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := gsc.mutation.Description(); ok {
		_spec.SetField(generalspec.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := gsc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ServiceTable,
			Columns: []string{generalspec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.DatabaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.DatabaseTable,
			Columns: []string{generalspec.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.ApispecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ApispecTable,
			Columns: []string{generalspec.ApispecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ProjectTable,
			Columns: []string{generalspec.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GeneralSpecCreateBulk is the builder for creating many GeneralSpec entities in bulk.
type GeneralSpecCreateBulk struct {
	config
	err      error
	builders []*GeneralSpecCreate
}

// Save creates the GeneralSpec entities in the database.
func (gscb *GeneralSpecCreateBulk) Save(ctx context.Context) ([]*GeneralSpec, error) {
	if gscb.err != nil {
		return nil, gscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GeneralSpec, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GeneralSpecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GeneralSpecCreateBulk) SaveX(ctx context.Context) []*GeneralSpec {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GeneralSpecCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GeneralSpecCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}
