// Code generated by ent, DO NOT EDIT.

package service

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeDatabases holds the string denoting the databases edge name in mutations.
	EdgeDatabases = "databases"
	// EdgeApispec holds the string denoting the apispec edge name in mutations.
	EdgeApispec = "apispec"
	// EdgeGeneralspec holds the string denoting the generalspec edge name in mutations.
	EdgeGeneralspec = "generalspec"
	// Table holds the table name of the service in the database.
	Table = "services"
	// DatabasesTable is the table that holds the databases relation/edge.
	DatabasesTable = "databases"
	// DatabasesInverseTable is the table name for the Database entity.
	// It exists in this package in order to avoid circular dependency with the "database" package.
	DatabasesInverseTable = "databases"
	// DatabasesColumn is the table column denoting the databases relation/edge.
	DatabasesColumn = "service_databases"
	// ApispecTable is the table that holds the apispec relation/edge.
	ApispecTable = "api_specs"
	// ApispecInverseTable is the table name for the APISpec entity.
	// It exists in this package in order to avoid circular dependency with the "apispec" package.
	ApispecInverseTable = "api_specs"
	// ApispecColumn is the table column denoting the apispec relation/edge.
	ApispecColumn = "service_apispec"
	// GeneralspecTable is the table that holds the generalspec relation/edge.
	GeneralspecTable = "services"
	// GeneralspecInverseTable is the table name for the GeneralSpec entity.
	// It exists in this package in order to avoid circular dependency with the "generalspec" package.
	GeneralspecInverseTable = "general_specs"
	// GeneralspecColumn is the table column denoting the generalspec relation/edge.
	GeneralspecColumn = "general_spec_service"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "services"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"general_spec_service",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Service queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDatabasesCount orders the results by databases count.
func ByDatabasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDatabasesStep(), opts...)
	}
}

// ByDatabases orders the results by databases terms.
func ByDatabases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDatabasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApispecField orders the results by apispec field.
func ByApispecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApispecStep(), sql.OrderByField(field, opts...))
	}
}

// ByGeneralspecField orders the results by generalspec field.
func ByGeneralspecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGeneralspecStep(), sql.OrderByField(field, opts...))
	}
}
func newDatabasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DatabasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DatabasesTable, DatabasesColumn),
	)
}
func newApispecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApispecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ApispecTable, ApispecColumn),
	)
}
func newGeneralspecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GeneralspecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, GeneralspecTable, GeneralspecColumn),
	)
}
