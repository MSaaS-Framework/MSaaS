// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/migrate"

	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/user"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/usergeneralspecpermissions"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// APISpec is the client for interacting with the APISpec builders.
	APISpec *APISpecClient
	// Database is the client for interacting with the Database builders.
	Database *DatabaseClient
	// GeneralSpec is the client for interacting with the GeneralSpec builders.
	GeneralSpec *GeneralSpecClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserGeneralSpecPermissions is the client for interacting with the UserGeneralSpecPermissions builders.
	UserGeneralSpecPermissions *UserGeneralSpecPermissionsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.APISpec = NewAPISpecClient(c.config)
	c.Database = NewDatabaseClient(c.config)
	c.GeneralSpec = NewGeneralSpecClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Service = NewServiceClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserGeneralSpecPermissions = NewUserGeneralSpecPermissionsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		APISpec:                    NewAPISpecClient(cfg),
		Database:                   NewDatabaseClient(cfg),
		GeneralSpec:                NewGeneralSpecClient(cfg),
		Project:                    NewProjectClient(cfg),
		Service:                    NewServiceClient(cfg),
		User:                       NewUserClient(cfg),
		UserGeneralSpecPermissions: NewUserGeneralSpecPermissionsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		APISpec:                    NewAPISpecClient(cfg),
		Database:                   NewDatabaseClient(cfg),
		GeneralSpec:                NewGeneralSpecClient(cfg),
		Project:                    NewProjectClient(cfg),
		Service:                    NewServiceClient(cfg),
		User:                       NewUserClient(cfg),
		UserGeneralSpecPermissions: NewUserGeneralSpecPermissionsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		APISpec.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.APISpec, c.Database, c.GeneralSpec, c.Project, c.Service, c.User,
		c.UserGeneralSpecPermissions,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.APISpec, c.Database, c.GeneralSpec, c.Project, c.Service, c.User,
		c.UserGeneralSpecPermissions,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *APISpecMutation:
		return c.APISpec.mutate(ctx, m)
	case *DatabaseMutation:
		return c.Database.mutate(ctx, m)
	case *GeneralSpecMutation:
		return c.GeneralSpec.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *ServiceMutation:
		return c.Service.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserGeneralSpecPermissionsMutation:
		return c.UserGeneralSpecPermissions.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// APISpecClient is a client for the APISpec schema.
type APISpecClient struct {
	config
}

// NewAPISpecClient returns a client for the APISpec from the given config.
func NewAPISpecClient(c config) *APISpecClient {
	return &APISpecClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apispec.Hooks(f(g(h())))`.
func (c *APISpecClient) Use(hooks ...Hook) {
	c.hooks.APISpec = append(c.hooks.APISpec, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apispec.Intercept(f(g(h())))`.
func (c *APISpecClient) Intercept(interceptors ...Interceptor) {
	c.inters.APISpec = append(c.inters.APISpec, interceptors...)
}

// Create returns a builder for creating a APISpec entity.
func (c *APISpecClient) Create() *APISpecCreate {
	mutation := newAPISpecMutation(c.config, OpCreate)
	return &APISpecCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of APISpec entities.
func (c *APISpecClient) CreateBulk(builders ...*APISpecCreate) *APISpecCreateBulk {
	return &APISpecCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *APISpecClient) MapCreateBulk(slice any, setFunc func(*APISpecCreate, int)) *APISpecCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &APISpecCreateBulk{err: fmt.Errorf("calling to APISpecClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*APISpecCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &APISpecCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for APISpec.
func (c *APISpecClient) Update() *APISpecUpdate {
	mutation := newAPISpecMutation(c.config, OpUpdate)
	return &APISpecUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APISpecClient) UpdateOne(as *APISpec) *APISpecUpdateOne {
	mutation := newAPISpecMutation(c.config, OpUpdateOne, withAPISpec(as))
	return &APISpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APISpecClient) UpdateOneID(id uuid.UUID) *APISpecUpdateOne {
	mutation := newAPISpecMutation(c.config, OpUpdateOne, withAPISpecID(id))
	return &APISpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for APISpec.
func (c *APISpecClient) Delete() *APISpecDelete {
	mutation := newAPISpecMutation(c.config, OpDelete)
	return &APISpecDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *APISpecClient) DeleteOne(as *APISpec) *APISpecDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *APISpecClient) DeleteOneID(id uuid.UUID) *APISpecDeleteOne {
	builder := c.Delete().Where(apispec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APISpecDeleteOne{builder}
}

// Query returns a query builder for APISpec.
func (c *APISpecClient) Query() *APISpecQuery {
	return &APISpecQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAPISpec},
		inters: c.Interceptors(),
	}
}

// Get returns a APISpec entity by its id.
func (c *APISpecClient) Get(ctx context.Context, id uuid.UUID) (*APISpec, error) {
	return c.Query().Where(apispec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APISpecClient) GetX(ctx context.Context, id uuid.UUID) *APISpec {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryService queries the service edge of a APISpec.
func (c *APISpecClient) QueryService(as *APISpec) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apispec.Table, apispec.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, apispec.ServiceTable, apispec.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGeneralspec queries the generalspec edge of a APISpec.
func (c *APISpecClient) QueryGeneralspec(as *APISpec) *GeneralSpecQuery {
	query := (&GeneralSpecClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apispec.Table, apispec.FieldID, id),
			sqlgraph.To(generalspec.Table, generalspec.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, apispec.GeneralspecTable, apispec.GeneralspecColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *APISpecClient) Hooks() []Hook {
	return c.hooks.APISpec
}

// Interceptors returns the client interceptors.
func (c *APISpecClient) Interceptors() []Interceptor {
	return c.inters.APISpec
}

func (c *APISpecClient) mutate(ctx context.Context, m *APISpecMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&APISpecCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&APISpecUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&APISpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&APISpecDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown APISpec mutation op: %q", m.Op())
	}
}

// DatabaseClient is a client for the Database schema.
type DatabaseClient struct {
	config
}

// NewDatabaseClient returns a client for the Database from the given config.
func NewDatabaseClient(c config) *DatabaseClient {
	return &DatabaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `database.Hooks(f(g(h())))`.
func (c *DatabaseClient) Use(hooks ...Hook) {
	c.hooks.Database = append(c.hooks.Database, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `database.Intercept(f(g(h())))`.
func (c *DatabaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Database = append(c.inters.Database, interceptors...)
}

// Create returns a builder for creating a Database entity.
func (c *DatabaseClient) Create() *DatabaseCreate {
	mutation := newDatabaseMutation(c.config, OpCreate)
	return &DatabaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Database entities.
func (c *DatabaseClient) CreateBulk(builders ...*DatabaseCreate) *DatabaseCreateBulk {
	return &DatabaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DatabaseClient) MapCreateBulk(slice any, setFunc func(*DatabaseCreate, int)) *DatabaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DatabaseCreateBulk{err: fmt.Errorf("calling to DatabaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DatabaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DatabaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Database.
func (c *DatabaseClient) Update() *DatabaseUpdate {
	mutation := newDatabaseMutation(c.config, OpUpdate)
	return &DatabaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DatabaseClient) UpdateOne(d *Database) *DatabaseUpdateOne {
	mutation := newDatabaseMutation(c.config, OpUpdateOne, withDatabase(d))
	return &DatabaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DatabaseClient) UpdateOneID(id uuid.UUID) *DatabaseUpdateOne {
	mutation := newDatabaseMutation(c.config, OpUpdateOne, withDatabaseID(id))
	return &DatabaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Database.
func (c *DatabaseClient) Delete() *DatabaseDelete {
	mutation := newDatabaseMutation(c.config, OpDelete)
	return &DatabaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DatabaseClient) DeleteOne(d *Database) *DatabaseDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DatabaseClient) DeleteOneID(id uuid.UUID) *DatabaseDeleteOne {
	builder := c.Delete().Where(database.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DatabaseDeleteOne{builder}
}

// Query returns a query builder for Database.
func (c *DatabaseClient) Query() *DatabaseQuery {
	return &DatabaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDatabase},
		inters: c.Interceptors(),
	}
}

// Get returns a Database entity by its id.
func (c *DatabaseClient) Get(ctx context.Context, id uuid.UUID) (*Database, error) {
	return c.Query().Where(database.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DatabaseClient) GetX(ctx context.Context, id uuid.UUID) *Database {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryService queries the service edge of a Database.
func (c *DatabaseClient) QueryService(d *Database) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(database.Table, database.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, database.ServiceTable, database.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGeneralspec queries the generalspec edge of a Database.
func (c *DatabaseClient) QueryGeneralspec(d *Database) *GeneralSpecQuery {
	query := (&GeneralSpecClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(database.Table, database.FieldID, id),
			sqlgraph.To(generalspec.Table, generalspec.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, database.GeneralspecTable, database.GeneralspecColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DatabaseClient) Hooks() []Hook {
	return c.hooks.Database
}

// Interceptors returns the client interceptors.
func (c *DatabaseClient) Interceptors() []Interceptor {
	return c.inters.Database
}

func (c *DatabaseClient) mutate(ctx context.Context, m *DatabaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DatabaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DatabaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DatabaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DatabaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Database mutation op: %q", m.Op())
	}
}

// GeneralSpecClient is a client for the GeneralSpec schema.
type GeneralSpecClient struct {
	config
}

// NewGeneralSpecClient returns a client for the GeneralSpec from the given config.
func NewGeneralSpecClient(c config) *GeneralSpecClient {
	return &GeneralSpecClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `generalspec.Hooks(f(g(h())))`.
func (c *GeneralSpecClient) Use(hooks ...Hook) {
	c.hooks.GeneralSpec = append(c.hooks.GeneralSpec, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `generalspec.Intercept(f(g(h())))`.
func (c *GeneralSpecClient) Intercept(interceptors ...Interceptor) {
	c.inters.GeneralSpec = append(c.inters.GeneralSpec, interceptors...)
}

// Create returns a builder for creating a GeneralSpec entity.
func (c *GeneralSpecClient) Create() *GeneralSpecCreate {
	mutation := newGeneralSpecMutation(c.config, OpCreate)
	return &GeneralSpecCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GeneralSpec entities.
func (c *GeneralSpecClient) CreateBulk(builders ...*GeneralSpecCreate) *GeneralSpecCreateBulk {
	return &GeneralSpecCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GeneralSpecClient) MapCreateBulk(slice any, setFunc func(*GeneralSpecCreate, int)) *GeneralSpecCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GeneralSpecCreateBulk{err: fmt.Errorf("calling to GeneralSpecClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GeneralSpecCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GeneralSpecCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GeneralSpec.
func (c *GeneralSpecClient) Update() *GeneralSpecUpdate {
	mutation := newGeneralSpecMutation(c.config, OpUpdate)
	return &GeneralSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GeneralSpecClient) UpdateOne(gs *GeneralSpec) *GeneralSpecUpdateOne {
	mutation := newGeneralSpecMutation(c.config, OpUpdateOne, withGeneralSpec(gs))
	return &GeneralSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GeneralSpecClient) UpdateOneID(id int) *GeneralSpecUpdateOne {
	mutation := newGeneralSpecMutation(c.config, OpUpdateOne, withGeneralSpecID(id))
	return &GeneralSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GeneralSpec.
func (c *GeneralSpecClient) Delete() *GeneralSpecDelete {
	mutation := newGeneralSpecMutation(c.config, OpDelete)
	return &GeneralSpecDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GeneralSpecClient) DeleteOne(gs *GeneralSpec) *GeneralSpecDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GeneralSpecClient) DeleteOneID(id int) *GeneralSpecDeleteOne {
	builder := c.Delete().Where(generalspec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GeneralSpecDeleteOne{builder}
}

// Query returns a query builder for GeneralSpec.
func (c *GeneralSpecClient) Query() *GeneralSpecQuery {
	return &GeneralSpecQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGeneralSpec},
		inters: c.Interceptors(),
	}
}

// Get returns a GeneralSpec entity by its id.
func (c *GeneralSpecClient) Get(ctx context.Context, id int) (*GeneralSpec, error) {
	return c.Query().Where(generalspec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GeneralSpecClient) GetX(ctx context.Context, id int) *GeneralSpec {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a GeneralSpec.
func (c *GeneralSpecClient) QueryProject(gs *GeneralSpec) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generalspec.ProjectTable, generalspec.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryService queries the service edge of a GeneralSpec.
func (c *GeneralSpecClient) QueryService(gs *GeneralSpec) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, generalspec.ServiceTable, generalspec.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDatabase queries the database edge of a GeneralSpec.
func (c *GeneralSpecClient) QueryDatabase(gs *GeneralSpec) *DatabaseQuery {
	query := (&DatabaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, id),
			sqlgraph.To(database.Table, database.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, generalspec.DatabaseTable, generalspec.DatabaseColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApispec queries the apispec edge of a GeneralSpec.
func (c *GeneralSpecClient) QueryApispec(gs *GeneralSpec) *APISpecQuery {
	query := (&APISpecClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, id),
			sqlgraph.To(apispec.Table, apispec.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, generalspec.ApispecTable, generalspec.ApispecColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a GeneralSpec.
func (c *GeneralSpecClient) QueryPermissions(gs *GeneralSpec) *UserGeneralSpecPermissionsQuery {
	query := (&UserGeneralSpecPermissionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, id),
			sqlgraph.To(usergeneralspecpermissions.Table, usergeneralspecpermissions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generalspec.PermissionsTable, generalspec.PermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GeneralSpecClient) Hooks() []Hook {
	return c.hooks.GeneralSpec
}

// Interceptors returns the client interceptors.
func (c *GeneralSpecClient) Interceptors() []Interceptor {
	return c.inters.GeneralSpec
}

func (c *GeneralSpecClient) mutate(ctx context.Context, m *GeneralSpecMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GeneralSpecCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GeneralSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GeneralSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GeneralSpecDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GeneralSpec mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id uuid.UUID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id uuid.UUID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id uuid.UUID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id uuid.UUID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGeneralSpecs queries the general_specs edge of a Project.
func (c *ProjectClient) QueryGeneralSpecs(pr *Project) *GeneralSpecQuery {
	query := (&GeneralSpecClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(generalspec.Table, generalspec.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.GeneralSpecsTable, project.GeneralSpecsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Project.
func (c *ProjectClient) QueryUsers(pr *Project) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, project.UsersTable, project.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `service.Hooks(f(g(h())))`.
func (c *ServiceClient) Use(hooks ...Hook) {
	c.hooks.Service = append(c.hooks.Service, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `service.Intercept(f(g(h())))`.
func (c *ServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Service = append(c.inters.Service, interceptors...)
}

// Create returns a builder for creating a Service entity.
func (c *ServiceClient) Create() *ServiceCreate {
	mutation := newServiceMutation(c.config, OpCreate)
	return &ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Service entities.
func (c *ServiceClient) CreateBulk(builders ...*ServiceCreate) *ServiceCreateBulk {
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceClient) MapCreateBulk(slice any, setFunc func(*ServiceCreate, int)) *ServiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceCreateBulk{err: fmt.Errorf("calling to ServiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	mutation := newServiceMutation(c.config, OpUpdate)
	return &ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withService(s))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id uuid.UUID) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withServiceID(id))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	mutation := newServiceMutation(c.config, OpDelete)
	return &ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceClient) DeleteOneID(id uuid.UUID) *ServiceDeleteOne {
	builder := c.Delete().Where(service.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceDeleteOne{builder}
}

// Query returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeService},
		inters: c.Interceptors(),
	}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id uuid.UUID) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id uuid.UUID) *Service {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDatabases queries the databases edge of a Service.
func (c *ServiceClient) QueryDatabases(s *Service) *DatabaseQuery {
	query := (&DatabaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(database.Table, database.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.DatabasesTable, service.DatabasesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApispec queries the apispec edge of a Service.
func (c *ServiceClient) QueryApispec(s *Service) *APISpecQuery {
	query := (&APISpecClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(apispec.Table, apispec.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, service.ApispecTable, service.ApispecColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGeneralspec queries the generalspec edge of a Service.
func (c *ServiceClient) QueryGeneralspec(s *Service) *GeneralSpecQuery {
	query := (&GeneralSpecClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(generalspec.Table, generalspec.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, service.GeneralspecTable, service.GeneralspecColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceClient) Hooks() []Hook {
	return c.hooks.Service
}

// Interceptors returns the client interceptors.
func (c *ServiceClient) Interceptors() []Interceptor {
	return c.inters.Service
}

func (c *ServiceClient) mutate(ctx context.Context, m *ServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Service mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermissions queries the permissions edge of a User.
func (c *UserClient) QueryPermissions(u *User) *UserGeneralSpecPermissionsQuery {
	query := (&UserGeneralSpecPermissionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usergeneralspecpermissions.Table, usergeneralspecpermissions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PermissionsTable, user.PermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a User.
func (c *UserClient) QueryProjects(u *User) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ProjectsTable, user.ProjectsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserGeneralSpecPermissionsClient is a client for the UserGeneralSpecPermissions schema.
type UserGeneralSpecPermissionsClient struct {
	config
}

// NewUserGeneralSpecPermissionsClient returns a client for the UserGeneralSpecPermissions from the given config.
func NewUserGeneralSpecPermissionsClient(c config) *UserGeneralSpecPermissionsClient {
	return &UserGeneralSpecPermissionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usergeneralspecpermissions.Hooks(f(g(h())))`.
func (c *UserGeneralSpecPermissionsClient) Use(hooks ...Hook) {
	c.hooks.UserGeneralSpecPermissions = append(c.hooks.UserGeneralSpecPermissions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usergeneralspecpermissions.Intercept(f(g(h())))`.
func (c *UserGeneralSpecPermissionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserGeneralSpecPermissions = append(c.inters.UserGeneralSpecPermissions, interceptors...)
}

// Create returns a builder for creating a UserGeneralSpecPermissions entity.
func (c *UserGeneralSpecPermissionsClient) Create() *UserGeneralSpecPermissionsCreate {
	mutation := newUserGeneralSpecPermissionsMutation(c.config, OpCreate)
	return &UserGeneralSpecPermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserGeneralSpecPermissions entities.
func (c *UserGeneralSpecPermissionsClient) CreateBulk(builders ...*UserGeneralSpecPermissionsCreate) *UserGeneralSpecPermissionsCreateBulk {
	return &UserGeneralSpecPermissionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserGeneralSpecPermissionsClient) MapCreateBulk(slice any, setFunc func(*UserGeneralSpecPermissionsCreate, int)) *UserGeneralSpecPermissionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserGeneralSpecPermissionsCreateBulk{err: fmt.Errorf("calling to UserGeneralSpecPermissionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserGeneralSpecPermissionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserGeneralSpecPermissionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserGeneralSpecPermissions.
func (c *UserGeneralSpecPermissionsClient) Update() *UserGeneralSpecPermissionsUpdate {
	mutation := newUserGeneralSpecPermissionsMutation(c.config, OpUpdate)
	return &UserGeneralSpecPermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserGeneralSpecPermissionsClient) UpdateOne(ugsp *UserGeneralSpecPermissions) *UserGeneralSpecPermissionsUpdateOne {
	mutation := newUserGeneralSpecPermissionsMutation(c.config, OpUpdateOne, withUserGeneralSpecPermissions(ugsp))
	return &UserGeneralSpecPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserGeneralSpecPermissionsClient) UpdateOneID(id uuid.UUID) *UserGeneralSpecPermissionsUpdateOne {
	mutation := newUserGeneralSpecPermissionsMutation(c.config, OpUpdateOne, withUserGeneralSpecPermissionsID(id))
	return &UserGeneralSpecPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserGeneralSpecPermissions.
func (c *UserGeneralSpecPermissionsClient) Delete() *UserGeneralSpecPermissionsDelete {
	mutation := newUserGeneralSpecPermissionsMutation(c.config, OpDelete)
	return &UserGeneralSpecPermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserGeneralSpecPermissionsClient) DeleteOne(ugsp *UserGeneralSpecPermissions) *UserGeneralSpecPermissionsDeleteOne {
	return c.DeleteOneID(ugsp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserGeneralSpecPermissionsClient) DeleteOneID(id uuid.UUID) *UserGeneralSpecPermissionsDeleteOne {
	builder := c.Delete().Where(usergeneralspecpermissions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserGeneralSpecPermissionsDeleteOne{builder}
}

// Query returns a query builder for UserGeneralSpecPermissions.
func (c *UserGeneralSpecPermissionsClient) Query() *UserGeneralSpecPermissionsQuery {
	return &UserGeneralSpecPermissionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserGeneralSpecPermissions},
		inters: c.Interceptors(),
	}
}

// Get returns a UserGeneralSpecPermissions entity by its id.
func (c *UserGeneralSpecPermissionsClient) Get(ctx context.Context, id uuid.UUID) (*UserGeneralSpecPermissions, error) {
	return c.Query().Where(usergeneralspecpermissions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserGeneralSpecPermissionsClient) GetX(ctx context.Context, id uuid.UUID) *UserGeneralSpecPermissions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserGeneralSpecPermissions.
func (c *UserGeneralSpecPermissionsClient) QueryUser(ugsp *UserGeneralSpecPermissions) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ugsp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usergeneralspecpermissions.Table, usergeneralspecpermissions.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usergeneralspecpermissions.UserTable, usergeneralspecpermissions.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ugsp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGeneralSpec queries the general_spec edge of a UserGeneralSpecPermissions.
func (c *UserGeneralSpecPermissionsClient) QueryGeneralSpec(ugsp *UserGeneralSpecPermissions) *GeneralSpecQuery {
	query := (&GeneralSpecClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ugsp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usergeneralspecpermissions.Table, usergeneralspecpermissions.FieldID, id),
			sqlgraph.To(generalspec.Table, generalspec.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usergeneralspecpermissions.GeneralSpecTable, usergeneralspecpermissions.GeneralSpecColumn),
		)
		fromV = sqlgraph.Neighbors(ugsp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserGeneralSpecPermissionsClient) Hooks() []Hook {
	return c.hooks.UserGeneralSpecPermissions
}

// Interceptors returns the client interceptors.
func (c *UserGeneralSpecPermissionsClient) Interceptors() []Interceptor {
	return c.inters.UserGeneralSpecPermissions
}

func (c *UserGeneralSpecPermissionsClient) mutate(ctx context.Context, m *UserGeneralSpecPermissionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserGeneralSpecPermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserGeneralSpecPermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserGeneralSpecPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserGeneralSpecPermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserGeneralSpecPermissions mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		APISpec, Database, GeneralSpec, Project, Service, User,
		UserGeneralSpecPermissions []ent.Hook
	}
	inters struct {
		APISpec, Database, GeneralSpec, Project, Service, User,
		UserGeneralSpecPermissions []ent.Interceptor
	}
)
