// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Database is the model entity for the Database schema.
type Database struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ConnectionPath holds the value of the "connection_path" field.
	ConnectionPath string `json:"connection_path,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// DbType holds the value of the "db_type" field.
	DbType string `json:"db_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatabaseQuery when eager-loading is set.
	Edges             DatabaseEdges `json:"edges"`
	project_databases *uuid.UUID
	service_databases *uuid.UUID
	selectValues      sql.SelectValues
}

// DatabaseEdges holds the relations/edges for other nodes in the graph.
type DatabaseEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DatabaseEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DatabaseEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Database) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case database.FieldConnectionPath, database.FieldPassword, database.FieldDbType:
			values[i] = new(sql.NullString)
		case database.FieldID:
			values[i] = new(uuid.UUID)
		case database.ForeignKeys[0]: // project_databases
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case database.ForeignKeys[1]: // service_databases
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Database fields.
func (d *Database) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case database.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case database.FieldConnectionPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connection_path", values[i])
			} else if value.Valid {
				d.ConnectionPath = value.String
			}
		case database.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				d.Password = value.String
			}
		case database.FieldDbType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field db_type", values[i])
			} else if value.Valid {
				d.DbType = value.String
			}
		case database.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_databases", values[i])
			} else if value.Valid {
				d.project_databases = new(uuid.UUID)
				*d.project_databases = *value.S.(*uuid.UUID)
			}
		case database.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_databases", values[i])
			} else if value.Valid {
				d.service_databases = new(uuid.UUID)
				*d.service_databases = *value.S.(*uuid.UUID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Database.
// This includes values selected through modifiers, order, etc.
func (d *Database) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryService queries the "service" edge of the Database entity.
func (d *Database) QueryService() *ServiceQuery {
	return NewDatabaseClient(d.config).QueryService(d)
}

// QueryProject queries the "project" edge of the Database entity.
func (d *Database) QueryProject() *ProjectQuery {
	return NewDatabaseClient(d.config).QueryProject(d)
}

// Update returns a builder for updating this Database.
// Note that you need to call Database.Unwrap() before calling this method if this Database
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Database) Update() *DatabaseUpdateOne {
	return NewDatabaseClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Database entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Database) Unwrap() *Database {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Database is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Database) String() string {
	var builder strings.Builder
	builder.WriteString("Database(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("connection_path=")
	builder.WriteString(d.ConnectionPath)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("db_type=")
	builder.WriteString(d.DbType)
	builder.WriteByte(')')
	return builder.String()
}

// Databases is a parsable slice of Database.
type Databases []*Database
