// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeServices holds the string denoting the services edge name in mutations.
	EdgeServices = "services"
	// EdgeDatabases holds the string denoting the databases edge name in mutations.
	EdgeDatabases = "databases"
	// EdgeApispecs holds the string denoting the apispecs edge name in mutations.
	EdgeApispecs = "apispecs"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// ServicesTable is the table that holds the services relation/edge.
	ServicesTable = "services"
	// ServicesInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServicesInverseTable = "services"
	// ServicesColumn is the table column denoting the services relation/edge.
	ServicesColumn = "project_services"
	// DatabasesTable is the table that holds the databases relation/edge.
	DatabasesTable = "databases"
	// DatabasesInverseTable is the table name for the Database entity.
	// It exists in this package in order to avoid circular dependency with the "database" package.
	DatabasesInverseTable = "databases"
	// DatabasesColumn is the table column denoting the databases relation/edge.
	DatabasesColumn = "project_databases"
	// ApispecsTable is the table that holds the apispecs relation/edge.
	ApispecsTable = "api_specs"
	// ApispecsInverseTable is the table name for the APISpec entity.
	// It exists in this package in order to avoid circular dependency with the "apispec" package.
	ApispecsInverseTable = "api_specs"
	// ApispecsColumn is the table column denoting the apispecs relation/edge.
	ApispecsColumn = "project_apispecs"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByServicesCount orders the results by services count.
func ByServicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServicesStep(), opts...)
	}
}

// ByServices orders the results by services terms.
func ByServices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDatabasesCount orders the results by databases count.
func ByDatabasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDatabasesStep(), opts...)
	}
}

// ByDatabases orders the results by databases terms.
func ByDatabases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDatabasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApispecsCount orders the results by apispecs count.
func ByApispecsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApispecsStep(), opts...)
	}
}

// ByApispecs orders the results by apispecs terms.
func ByApispecs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApispecsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newServicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServicesTable, ServicesColumn),
	)
}
func newDatabasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DatabasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DatabasesTable, DatabasesColumn),
	)
}
func newApispecsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApispecsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApispecsTable, ApispecsColumn),
	)
}
