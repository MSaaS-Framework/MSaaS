// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Service is the model entity for the Service schema.
type Service struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges                ServiceEdges `json:"edges"`
	general_spec_service *int
	selectValues         sql.SelectValues
}

// ServiceEdges holds the relations/edges for other nodes in the graph.
type ServiceEdges struct {
	// Databases holds the value of the databases edge.
	Databases []*Database `json:"databases,omitempty"`
	// Apispec holds the value of the apispec edge.
	Apispec *APISpec `json:"apispec,omitempty"`
	// Generalspec holds the value of the generalspec edge.
	Generalspec *GeneralSpec `json:"generalspec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DatabasesOrErr returns the Databases value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceEdges) DatabasesOrErr() ([]*Database, error) {
	if e.loadedTypes[0] {
		return e.Databases, nil
	}
	return nil, &NotLoadedError{edge: "databases"}
}

// ApispecOrErr returns the Apispec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) ApispecOrErr() (*APISpec, error) {
	if e.Apispec != nil {
		return e.Apispec, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: apispec.Label}
	}
	return nil, &NotLoadedError{edge: "apispec"}
}

// GeneralspecOrErr returns the Generalspec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) GeneralspecOrErr() (*GeneralSpec, error) {
	if e.Generalspec != nil {
		return e.Generalspec, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: generalspec.Label}
	}
	return nil, &NotLoadedError{edge: "generalspec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			values[i] = new(uuid.UUID)
		case service.ForeignKeys[0]: // general_spec_service
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case service.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field general_spec_service", value)
			} else if value.Valid {
				s.general_spec_service = new(int)
				*s.general_spec_service = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Service.
// This includes values selected through modifiers, order, etc.
func (s *Service) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryDatabases queries the "databases" edge of the Service entity.
func (s *Service) QueryDatabases() *DatabaseQuery {
	return NewServiceClient(s.config).QueryDatabases(s)
}

// QueryApispec queries the "apispec" edge of the Service entity.
func (s *Service) QueryApispec() *APISpecQuery {
	return NewServiceClient(s.config).QueryApispec(s)
}

// QueryGeneralspec queries the "generalspec" edge of the Service entity.
func (s *Service) QueryGeneralspec() *GeneralSpecQuery {
	return NewServiceClient(s.config).QueryGeneralspec(s)
}

// Update returns a builder for updating this Service.
// Note that you need to call Service.Unwrap() before calling this method if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return NewServiceClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Service entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Service is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service
