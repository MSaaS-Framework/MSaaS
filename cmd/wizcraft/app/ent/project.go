// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Project is the model entity for the Project schema.
type Project struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges                ProjectEdges `json:"edges"`
	general_spec_project *int
	selectValues         sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Services holds the value of the services edge.
	Services []*Service `json:"services,omitempty"`
	// Databases holds the value of the databases edge.
	Databases []*Database `json:"databases,omitempty"`
	// Apispecs holds the value of the apispecs edge.
	Apispecs []*APISpec `json:"apispecs,omitempty"`
	// Generalspec holds the value of the generalspec edge.
	Generalspec *GeneralSpec `json:"generalspec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ServicesOrErr() ([]*Service, error) {
	if e.loadedTypes[0] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// DatabasesOrErr returns the Databases value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) DatabasesOrErr() ([]*Database, error) {
	if e.loadedTypes[1] {
		return e.Databases, nil
	}
	return nil, &NotLoadedError{edge: "databases"}
}

// ApispecsOrErr returns the Apispecs value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ApispecsOrErr() ([]*APISpec, error) {
	if e.loadedTypes[2] {
		return e.Apispecs, nil
	}
	return nil, &NotLoadedError{edge: "apispecs"}
}

// GeneralspecOrErr returns the Generalspec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) GeneralspecOrErr() (*GeneralSpec, error) {
	if e.Generalspec != nil {
		return e.Generalspec, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: generalspec.Label}
	}
	return nil, &NotLoadedError{edge: "generalspec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			values[i] = new(uuid.UUID)
		case project.ForeignKeys[0]: // general_spec_project
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case project.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field general_spec_project", value)
			} else if value.Valid {
				pr.general_spec_project = new(int)
				*pr.general_spec_project = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryServices queries the "services" edge of the Project entity.
func (pr *Project) QueryServices() *ServiceQuery {
	return NewProjectClient(pr.config).QueryServices(pr)
}

// QueryDatabases queries the "databases" edge of the Project entity.
func (pr *Project) QueryDatabases() *DatabaseQuery {
	return NewProjectClient(pr.config).QueryDatabases(pr)
}

// QueryApispecs queries the "apispecs" edge of the Project entity.
func (pr *Project) QueryApispecs() *APISpecQuery {
	return NewProjectClient(pr.config).QueryApispecs(pr)
}

// QueryGeneralspec queries the "generalspec" edge of the Project entity.
func (pr *Project) QueryGeneralspec() *GeneralSpecQuery {
	return NewProjectClient(pr.config).QueryGeneralspec(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
