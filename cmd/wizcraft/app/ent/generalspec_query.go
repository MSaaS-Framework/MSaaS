// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GeneralSpecQuery is the builder for querying GeneralSpec entities.
type GeneralSpecQuery struct {
	config
	ctx          *QueryContext
	order        []generalspec.OrderOption
	inters       []Interceptor
	predicates   []predicate.GeneralSpec
	withService  *ServiceQuery
	withDatabase *DatabaseQuery
	withApispec  *APISpecQuery
	withProject  *ProjectQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GeneralSpecQuery builder.
func (gsq *GeneralSpecQuery) Where(ps ...predicate.GeneralSpec) *GeneralSpecQuery {
	gsq.predicates = append(gsq.predicates, ps...)
	return gsq
}

// Limit the number of records to be returned by this query.
func (gsq *GeneralSpecQuery) Limit(limit int) *GeneralSpecQuery {
	gsq.ctx.Limit = &limit
	return gsq
}

// Offset to start from.
func (gsq *GeneralSpecQuery) Offset(offset int) *GeneralSpecQuery {
	gsq.ctx.Offset = &offset
	return gsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gsq *GeneralSpecQuery) Unique(unique bool) *GeneralSpecQuery {
	gsq.ctx.Unique = &unique
	return gsq
}

// Order specifies how the records should be ordered.
func (gsq *GeneralSpecQuery) Order(o ...generalspec.OrderOption) *GeneralSpecQuery {
	gsq.order = append(gsq.order, o...)
	return gsq
}

// QueryService chains the current query on the "service" edge.
func (gsq *GeneralSpecQuery) QueryService() *ServiceQuery {
	query := (&ServiceClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalspec.ServiceTable, generalspec.ServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDatabase chains the current query on the "database" edge.
func (gsq *GeneralSpecQuery) QueryDatabase() *DatabaseQuery {
	query := (&DatabaseClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, selector),
			sqlgraph.To(database.Table, database.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalspec.DatabaseTable, generalspec.DatabaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApispec chains the current query on the "apispec" edge.
func (gsq *GeneralSpecQuery) QueryApispec() *APISpecQuery {
	query := (&APISpecClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, selector),
			sqlgraph.To(apispec.Table, apispec.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalspec.ApispecTable, generalspec.ApispecColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (gsq *GeneralSpecQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generalspec.Table, generalspec.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalspec.ProjectTable, generalspec.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GeneralSpec entity from the query.
// Returns a *NotFoundError when no GeneralSpec was found.
func (gsq *GeneralSpecQuery) First(ctx context.Context) (*GeneralSpec, error) {
	nodes, err := gsq.Limit(1).All(setContextOp(ctx, gsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{generalspec.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gsq *GeneralSpecQuery) FirstX(ctx context.Context) *GeneralSpec {
	node, err := gsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GeneralSpec ID from the query.
// Returns a *NotFoundError when no GeneralSpec ID was found.
func (gsq *GeneralSpecQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsq.Limit(1).IDs(setContextOp(ctx, gsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{generalspec.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gsq *GeneralSpecQuery) FirstIDX(ctx context.Context) int {
	id, err := gsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GeneralSpec entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GeneralSpec entity is found.
// Returns a *NotFoundError when no GeneralSpec entities are found.
func (gsq *GeneralSpecQuery) Only(ctx context.Context) (*GeneralSpec, error) {
	nodes, err := gsq.Limit(2).All(setContextOp(ctx, gsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{generalspec.Label}
	default:
		return nil, &NotSingularError{generalspec.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gsq *GeneralSpecQuery) OnlyX(ctx context.Context) *GeneralSpec {
	node, err := gsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GeneralSpec ID in the query.
// Returns a *NotSingularError when more than one GeneralSpec ID is found.
// Returns a *NotFoundError when no entities are found.
func (gsq *GeneralSpecQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsq.Limit(2).IDs(setContextOp(ctx, gsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{generalspec.Label}
	default:
		err = &NotSingularError{generalspec.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gsq *GeneralSpecQuery) OnlyIDX(ctx context.Context) int {
	id, err := gsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GeneralSpecs.
func (gsq *GeneralSpecQuery) All(ctx context.Context) ([]*GeneralSpec, error) {
	ctx = setContextOp(ctx, gsq.ctx, ent.OpQueryAll)
	if err := gsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GeneralSpec, *GeneralSpecQuery]()
	return withInterceptors[[]*GeneralSpec](ctx, gsq, qr, gsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gsq *GeneralSpecQuery) AllX(ctx context.Context) []*GeneralSpec {
	nodes, err := gsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GeneralSpec IDs.
func (gsq *GeneralSpecQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gsq.ctx.Unique == nil && gsq.path != nil {
		gsq.Unique(true)
	}
	ctx = setContextOp(ctx, gsq.ctx, ent.OpQueryIDs)
	if err = gsq.Select(generalspec.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gsq *GeneralSpecQuery) IDsX(ctx context.Context) []int {
	ids, err := gsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gsq *GeneralSpecQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gsq.ctx, ent.OpQueryCount)
	if err := gsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gsq, querierCount[*GeneralSpecQuery](), gsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gsq *GeneralSpecQuery) CountX(ctx context.Context) int {
	count, err := gsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gsq *GeneralSpecQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gsq.ctx, ent.OpQueryExist)
	switch _, err := gsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gsq *GeneralSpecQuery) ExistX(ctx context.Context) bool {
	exist, err := gsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GeneralSpecQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gsq *GeneralSpecQuery) Clone() *GeneralSpecQuery {
	if gsq == nil {
		return nil
	}
	return &GeneralSpecQuery{
		config:       gsq.config,
		ctx:          gsq.ctx.Clone(),
		order:        append([]generalspec.OrderOption{}, gsq.order...),
		inters:       append([]Interceptor{}, gsq.inters...),
		predicates:   append([]predicate.GeneralSpec{}, gsq.predicates...),
		withService:  gsq.withService.Clone(),
		withDatabase: gsq.withDatabase.Clone(),
		withApispec:  gsq.withApispec.Clone(),
		withProject:  gsq.withProject.Clone(),
		// clone intermediate query.
		sql:  gsq.sql.Clone(),
		path: gsq.path,
	}
}

// WithService tells the query-builder to eager-load the nodes that are connected to
// the "service" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GeneralSpecQuery) WithService(opts ...func(*ServiceQuery)) *GeneralSpecQuery {
	query := (&ServiceClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withService = query
	return gsq
}

// WithDatabase tells the query-builder to eager-load the nodes that are connected to
// the "database" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GeneralSpecQuery) WithDatabase(opts ...func(*DatabaseQuery)) *GeneralSpecQuery {
	query := (&DatabaseClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withDatabase = query
	return gsq
}

// WithApispec tells the query-builder to eager-load the nodes that are connected to
// the "apispec" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GeneralSpecQuery) WithApispec(opts ...func(*APISpecQuery)) *GeneralSpecQuery {
	query := (&APISpecClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withApispec = query
	return gsq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GeneralSpecQuery) WithProject(opts ...func(*ProjectQuery)) *GeneralSpecQuery {
	query := (&ProjectClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withProject = query
	return gsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GeneralSpec.Query().
//		GroupBy(generalspec.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gsq *GeneralSpecQuery) GroupBy(field string, fields ...string) *GeneralSpecGroupBy {
	gsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GeneralSpecGroupBy{build: gsq}
	grbuild.flds = &gsq.ctx.Fields
	grbuild.label = generalspec.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//	}
//
//	client.GeneralSpec.Query().
//		Select(generalspec.FieldUUID).
//		Scan(ctx, &v)
func (gsq *GeneralSpecQuery) Select(fields ...string) *GeneralSpecSelect {
	gsq.ctx.Fields = append(gsq.ctx.Fields, fields...)
	sbuild := &GeneralSpecSelect{GeneralSpecQuery: gsq}
	sbuild.label = generalspec.Label
	sbuild.flds, sbuild.scan = &gsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GeneralSpecSelect configured with the given aggregations.
func (gsq *GeneralSpecQuery) Aggregate(fns ...AggregateFunc) *GeneralSpecSelect {
	return gsq.Select().Aggregate(fns...)
}

func (gsq *GeneralSpecQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gsq); err != nil {
				return err
			}
		}
	}
	for _, f := range gsq.ctx.Fields {
		if !generalspec.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gsq.path != nil {
		prev, err := gsq.path(ctx)
		if err != nil {
			return err
		}
		gsq.sql = prev
	}
	return nil
}

func (gsq *GeneralSpecQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GeneralSpec, error) {
	var (
		nodes       = []*GeneralSpec{}
		withFKs     = gsq.withFKs
		_spec       = gsq.querySpec()
		loadedTypes = [4]bool{
			gsq.withService != nil,
			gsq.withDatabase != nil,
			gsq.withApispec != nil,
			gsq.withProject != nil,
		}
	)
	if gsq.withService != nil || gsq.withDatabase != nil || gsq.withApispec != nil || gsq.withProject != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, generalspec.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GeneralSpec).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GeneralSpec{config: gsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gsq.withService; query != nil {
		if err := gsq.loadService(ctx, query, nodes, nil,
			func(n *GeneralSpec, e *Service) { n.Edges.Service = e }); err != nil {
			return nil, err
		}
	}
	if query := gsq.withDatabase; query != nil {
		if err := gsq.loadDatabase(ctx, query, nodes, nil,
			func(n *GeneralSpec, e *Database) { n.Edges.Database = e }); err != nil {
			return nil, err
		}
	}
	if query := gsq.withApispec; query != nil {
		if err := gsq.loadApispec(ctx, query, nodes, nil,
			func(n *GeneralSpec, e *APISpec) { n.Edges.Apispec = e }); err != nil {
			return nil, err
		}
	}
	if query := gsq.withProject; query != nil {
		if err := gsq.loadProject(ctx, query, nodes, nil,
			func(n *GeneralSpec, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gsq *GeneralSpecQuery) loadService(ctx context.Context, query *ServiceQuery, nodes []*GeneralSpec, init func(*GeneralSpec), assign func(*GeneralSpec, *Service)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GeneralSpec)
	for i := range nodes {
		if nodes[i].general_spec_service == nil {
			continue
		}
		fk := *nodes[i].general_spec_service
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(service.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "general_spec_service" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gsq *GeneralSpecQuery) loadDatabase(ctx context.Context, query *DatabaseQuery, nodes []*GeneralSpec, init func(*GeneralSpec), assign func(*GeneralSpec, *Database)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GeneralSpec)
	for i := range nodes {
		if nodes[i].general_spec_database == nil {
			continue
		}
		fk := *nodes[i].general_spec_database
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(database.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "general_spec_database" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gsq *GeneralSpecQuery) loadApispec(ctx context.Context, query *APISpecQuery, nodes []*GeneralSpec, init func(*GeneralSpec), assign func(*GeneralSpec, *APISpec)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GeneralSpec)
	for i := range nodes {
		if nodes[i].general_spec_apispec == nil {
			continue
		}
		fk := *nodes[i].general_spec_apispec
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(apispec.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "general_spec_apispec" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gsq *GeneralSpecQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*GeneralSpec, init func(*GeneralSpec), assign func(*GeneralSpec, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GeneralSpec)
	for i := range nodes {
		if nodes[i].general_spec_project == nil {
			continue
		}
		fk := *nodes[i].general_spec_project
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "general_spec_project" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gsq *GeneralSpecQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gsq.querySpec()
	_spec.Node.Columns = gsq.ctx.Fields
	if len(gsq.ctx.Fields) > 0 {
		_spec.Unique = gsq.ctx.Unique != nil && *gsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gsq.driver, _spec)
}

func (gsq *GeneralSpecQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(generalspec.Table, generalspec.Columns, sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt))
	_spec.From = gsq.sql
	if unique := gsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gsq.path != nil {
		_spec.Unique = true
	}
	if fields := gsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generalspec.FieldID)
		for i := range fields {
			if fields[i] != generalspec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gsq *GeneralSpecQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gsq.driver.Dialect())
	t1 := builder.Table(generalspec.Table)
	columns := gsq.ctx.Fields
	if len(columns) == 0 {
		columns = generalspec.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gsq.sql != nil {
		selector = gsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gsq.ctx.Unique != nil && *gsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gsq.predicates {
		p(selector)
	}
	for _, p := range gsq.order {
		p(selector)
	}
	if offset := gsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GeneralSpecGroupBy is the group-by builder for GeneralSpec entities.
type GeneralSpecGroupBy struct {
	selector
	build *GeneralSpecQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gsgb *GeneralSpecGroupBy) Aggregate(fns ...AggregateFunc) *GeneralSpecGroupBy {
	gsgb.fns = append(gsgb.fns, fns...)
	return gsgb
}

// Scan applies the selector query and scans the result into the given value.
func (gsgb *GeneralSpecGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gsgb.build.ctx, ent.OpQueryGroupBy)
	if err := gsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GeneralSpecQuery, *GeneralSpecGroupBy](ctx, gsgb.build, gsgb, gsgb.build.inters, v)
}

func (gsgb *GeneralSpecGroupBy) sqlScan(ctx context.Context, root *GeneralSpecQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gsgb.fns))
	for _, fn := range gsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gsgb.flds)+len(gsgb.fns))
		for _, f := range *gsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GeneralSpecSelect is the builder for selecting fields of GeneralSpec entities.
type GeneralSpecSelect struct {
	*GeneralSpecQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gss *GeneralSpecSelect) Aggregate(fns ...AggregateFunc) *GeneralSpecSelect {
	gss.fns = append(gss.fns, fns...)
	return gss
}

// Scan applies the selector query and scans the result into the given value.
func (gss *GeneralSpecSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gss.ctx, ent.OpQuerySelect)
	if err := gss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GeneralSpecQuery, *GeneralSpecSelect](ctx, gss.GeneralSpecQuery, gss, gss.inters, v)
}

func (gss *GeneralSpecSelect) sqlScan(ctx context.Context, root *GeneralSpecQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gss.fns))
	for _, fn := range gss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
