// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/user"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/usergeneralspecpermissions"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserGeneralSpecPermissionsCreate is the builder for creating a UserGeneralSpecPermissions entity.
type UserGeneralSpecPermissionsCreate struct {
	config
	mutation *UserGeneralSpecPermissionsMutation
	hooks    []Hook
}

// SetPermission sets the "permission" field.
func (ugspc *UserGeneralSpecPermissionsCreate) SetPermission(u usergeneralspecpermissions.Permission) *UserGeneralSpecPermissionsCreate {
	ugspc.mutation.SetPermission(u)
	return ugspc
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (ugspc *UserGeneralSpecPermissionsCreate) SetNillablePermission(u *usergeneralspecpermissions.Permission) *UserGeneralSpecPermissionsCreate {
	if u != nil {
		ugspc.SetPermission(*u)
	}
	return ugspc
}

// SetID sets the "id" field.
func (ugspc *UserGeneralSpecPermissionsCreate) SetID(u uuid.UUID) *UserGeneralSpecPermissionsCreate {
	ugspc.mutation.SetID(u)
	return ugspc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ugspc *UserGeneralSpecPermissionsCreate) SetNillableID(u *uuid.UUID) *UserGeneralSpecPermissionsCreate {
	if u != nil {
		ugspc.SetID(*u)
	}
	return ugspc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ugspc *UserGeneralSpecPermissionsCreate) SetUserID(id uuid.UUID) *UserGeneralSpecPermissionsCreate {
	ugspc.mutation.SetUserID(id)
	return ugspc
}

// SetUser sets the "user" edge to the User entity.
func (ugspc *UserGeneralSpecPermissionsCreate) SetUser(u *User) *UserGeneralSpecPermissionsCreate {
	return ugspc.SetUserID(u.ID)
}

// SetGeneralSpecID sets the "general_spec" edge to the GeneralSpec entity by ID.
func (ugspc *UserGeneralSpecPermissionsCreate) SetGeneralSpecID(id int) *UserGeneralSpecPermissionsCreate {
	ugspc.mutation.SetGeneralSpecID(id)
	return ugspc
}

// SetGeneralSpec sets the "general_spec" edge to the GeneralSpec entity.
func (ugspc *UserGeneralSpecPermissionsCreate) SetGeneralSpec(g *GeneralSpec) *UserGeneralSpecPermissionsCreate {
	return ugspc.SetGeneralSpecID(g.ID)
}

// Mutation returns the UserGeneralSpecPermissionsMutation object of the builder.
func (ugspc *UserGeneralSpecPermissionsCreate) Mutation() *UserGeneralSpecPermissionsMutation {
	return ugspc.mutation
}

// Save creates the UserGeneralSpecPermissions in the database.
func (ugspc *UserGeneralSpecPermissionsCreate) Save(ctx context.Context) (*UserGeneralSpecPermissions, error) {
	ugspc.defaults()
	return withHooks(ctx, ugspc.sqlSave, ugspc.mutation, ugspc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ugspc *UserGeneralSpecPermissionsCreate) SaveX(ctx context.Context) *UserGeneralSpecPermissions {
	v, err := ugspc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugspc *UserGeneralSpecPermissionsCreate) Exec(ctx context.Context) error {
	_, err := ugspc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugspc *UserGeneralSpecPermissionsCreate) ExecX(ctx context.Context) {
	if err := ugspc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ugspc *UserGeneralSpecPermissionsCreate) defaults() {
	if _, ok := ugspc.mutation.Permission(); !ok {
		v := usergeneralspecpermissions.DefaultPermission
		ugspc.mutation.SetPermission(v)
	}
	if _, ok := ugspc.mutation.ID(); !ok {
		v := usergeneralspecpermissions.DefaultID()
		ugspc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugspc *UserGeneralSpecPermissionsCreate) check() error {
	if _, ok := ugspc.mutation.Permission(); !ok {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required field "UserGeneralSpecPermissions.permission"`)}
	}
	if v, ok := ugspc.mutation.Permission(); ok {
		if err := usergeneralspecpermissions.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`ent: validator failed for field "UserGeneralSpecPermissions.permission": %w`, err)}
		}
	}
	if len(ugspc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserGeneralSpecPermissions.user"`)}
	}
	if len(ugspc.mutation.GeneralSpecIDs()) == 0 {
		return &ValidationError{Name: "general_spec", err: errors.New(`ent: missing required edge "UserGeneralSpecPermissions.general_spec"`)}
	}
	return nil
}

func (ugspc *UserGeneralSpecPermissionsCreate) sqlSave(ctx context.Context) (*UserGeneralSpecPermissions, error) {
	if err := ugspc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ugspc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ugspc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ugspc.mutation.id = &_node.ID
	ugspc.mutation.done = true
	return _node, nil
}

func (ugspc *UserGeneralSpecPermissionsCreate) createSpec() (*UserGeneralSpecPermissions, *sqlgraph.CreateSpec) {
	var (
		_node = &UserGeneralSpecPermissions{config: ugspc.config}
		_spec = sqlgraph.NewCreateSpec(usergeneralspecpermissions.Table, sqlgraph.NewFieldSpec(usergeneralspecpermissions.FieldID, field.TypeUUID))
	)
	if id, ok := ugspc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ugspc.mutation.Permission(); ok {
		_spec.SetField(usergeneralspecpermissions.FieldPermission, field.TypeEnum, value)
		_node.Permission = value
	}
	if nodes := ugspc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.UserTable,
			Columns: []string{usergeneralspecpermissions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_permissions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ugspc.mutation.GeneralSpecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergeneralspecpermissions.GeneralSpecTable,
			Columns: []string{usergeneralspecpermissions.GeneralSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.general_spec_permissions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserGeneralSpecPermissionsCreateBulk is the builder for creating many UserGeneralSpecPermissions entities in bulk.
type UserGeneralSpecPermissionsCreateBulk struct {
	config
	err      error
	builders []*UserGeneralSpecPermissionsCreate
}

// Save creates the UserGeneralSpecPermissions entities in the database.
func (ugspcb *UserGeneralSpecPermissionsCreateBulk) Save(ctx context.Context) ([]*UserGeneralSpecPermissions, error) {
	if ugspcb.err != nil {
		return nil, ugspcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ugspcb.builders))
	nodes := make([]*UserGeneralSpecPermissions, len(ugspcb.builders))
	mutators := make([]Mutator, len(ugspcb.builders))
	for i := range ugspcb.builders {
		func(i int, root context.Context) {
			builder := ugspcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserGeneralSpecPermissionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ugspcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ugspcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ugspcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ugspcb *UserGeneralSpecPermissionsCreateBulk) SaveX(ctx context.Context) []*UserGeneralSpecPermissions {
	v, err := ugspcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugspcb *UserGeneralSpecPermissionsCreateBulk) Exec(ctx context.Context) error {
	_, err := ugspcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugspcb *UserGeneralSpecPermissionsCreateBulk) ExecX(ctx context.Context) {
	if err := ugspcb.Exec(ctx); err != nil {
		panic(err)
	}
}
