// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// APISpecCreate is the builder for creating a APISpec entity.
type APISpecCreate struct {
	config
	mutation *APISpecMutation
	hooks    []Hook
}

// SetOpenapiSpec sets the "openapi_spec" field.
func (asc *APISpecCreate) SetOpenapiSpec(u []uint8) *APISpecCreate {
	asc.mutation.SetOpenapiSpec(u)
	return asc
}

// SetID sets the "id" field.
func (asc *APISpecCreate) SetID(u uuid.UUID) *APISpecCreate {
	asc.mutation.SetID(u)
	return asc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (asc *APISpecCreate) SetNillableID(u *uuid.UUID) *APISpecCreate {
	if u != nil {
		asc.SetID(*u)
	}
	return asc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (asc *APISpecCreate) SetServiceID(id uuid.UUID) *APISpecCreate {
	asc.mutation.SetServiceID(id)
	return asc
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (asc *APISpecCreate) SetNillableServiceID(id *uuid.UUID) *APISpecCreate {
	if id != nil {
		asc = asc.SetServiceID(*id)
	}
	return asc
}

// SetService sets the "service" edge to the Service entity.
func (asc *APISpecCreate) SetService(s *Service) *APISpecCreate {
	return asc.SetServiceID(s.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (asc *APISpecCreate) SetProjectID(id uuid.UUID) *APISpecCreate {
	asc.mutation.SetProjectID(id)
	return asc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (asc *APISpecCreate) SetNillableProjectID(id *uuid.UUID) *APISpecCreate {
	if id != nil {
		asc = asc.SetProjectID(*id)
	}
	return asc
}

// SetProject sets the "project" edge to the Project entity.
func (asc *APISpecCreate) SetProject(p *Project) *APISpecCreate {
	return asc.SetProjectID(p.ID)
}

// Mutation returns the APISpecMutation object of the builder.
func (asc *APISpecCreate) Mutation() *APISpecMutation {
	return asc.mutation
}

// Save creates the APISpec in the database.
func (asc *APISpecCreate) Save(ctx context.Context) (*APISpec, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *APISpecCreate) SaveX(ctx context.Context) *APISpec {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *APISpecCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *APISpecCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *APISpecCreate) defaults() {
	if _, ok := asc.mutation.ID(); !ok {
		v := apispec.DefaultID()
		asc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *APISpecCreate) check() error {
	if _, ok := asc.mutation.OpenapiSpec(); !ok {
		return &ValidationError{Name: "openapi_spec", err: errors.New(`ent: missing required field "APISpec.openapi_spec"`)}
	}
	return nil
}

func (asc *APISpecCreate) sqlSave(ctx context.Context) (*APISpec, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *APISpecCreate) createSpec() (*APISpec, *sqlgraph.CreateSpec) {
	var (
		_node = &APISpec{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(apispec.Table, sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID))
	)
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := asc.mutation.OpenapiSpec(); ok {
		_spec.SetField(apispec.FieldOpenapiSpec, field.TypeJSON, value)
		_node.OpenapiSpec = value
	}
	if nodes := asc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apispec.ServiceTable,
			Columns: []string{apispec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_apispec = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apispec.ProjectTable,
			Columns: []string{apispec.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_apispecs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// APISpecCreateBulk is the builder for creating many APISpec entities in bulk.
type APISpecCreateBulk struct {
	config
	err      error
	builders []*APISpecCreate
}

// Save creates the APISpec entities in the database.
func (ascb *APISpecCreateBulk) Save(ctx context.Context) ([]*APISpec, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*APISpec, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APISpecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *APISpecCreateBulk) SaveX(ctx context.Context) []*APISpec {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *APISpecCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *APISpecCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
