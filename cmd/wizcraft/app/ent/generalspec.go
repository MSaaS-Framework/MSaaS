// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// GeneralSpec is the model entity for the GeneralSpec schema.
type GeneralSpec struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GeneralSpecQuery when eager-loading is set.
	Edges        GeneralSpecEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GeneralSpecEdges holds the relations/edges for other nodes in the graph.
type GeneralSpecEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// Database holds the value of the database edge.
	Database *Database `json:"database,omitempty"`
	// Apispec holds the value of the apispec edge.
	Apispec *APISpec `json:"apispec,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneralSpecEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// DatabaseOrErr returns the Database value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneralSpecEdges) DatabaseOrErr() (*Database, error) {
	if e.Database != nil {
		return e.Database, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: database.Label}
	}
	return nil, &NotLoadedError{edge: "database"}
}

// ApispecOrErr returns the Apispec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneralSpecEdges) ApispecOrErr() (*APISpec, error) {
	if e.Apispec != nil {
		return e.Apispec, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: apispec.Label}
	}
	return nil, &NotLoadedError{edge: "apispec"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneralSpecEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GeneralSpec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case generalspec.FieldID:
			values[i] = new(sql.NullInt64)
		case generalspec.FieldName, generalspec.FieldType, generalspec.FieldStatus, generalspec.FieldDescription:
			values[i] = new(sql.NullString)
		case generalspec.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GeneralSpec fields.
func (gs *GeneralSpec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case generalspec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case generalspec.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				gs.UUID = *value
			}
		case generalspec.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gs.Name = value.String
			}
		case generalspec.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gs.Type = value.String
			}
		case generalspec.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				gs.Status = value.String
			}
		case generalspec.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				gs.Description = value.String
			}
		default:
			gs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GeneralSpec.
// This includes values selected through modifiers, order, etc.
func (gs *GeneralSpec) Value(name string) (ent.Value, error) {
	return gs.selectValues.Get(name)
}

// QueryService queries the "service" edge of the GeneralSpec entity.
func (gs *GeneralSpec) QueryService() *ServiceQuery {
	return NewGeneralSpecClient(gs.config).QueryService(gs)
}

// QueryDatabase queries the "database" edge of the GeneralSpec entity.
func (gs *GeneralSpec) QueryDatabase() *DatabaseQuery {
	return NewGeneralSpecClient(gs.config).QueryDatabase(gs)
}

// QueryApispec queries the "apispec" edge of the GeneralSpec entity.
func (gs *GeneralSpec) QueryApispec() *APISpecQuery {
	return NewGeneralSpecClient(gs.config).QueryApispec(gs)
}

// QueryProject queries the "project" edge of the GeneralSpec entity.
func (gs *GeneralSpec) QueryProject() *ProjectQuery {
	return NewGeneralSpecClient(gs.config).QueryProject(gs)
}

// Update returns a builder for updating this GeneralSpec.
// Note that you need to call GeneralSpec.Unwrap() before calling this method if this GeneralSpec
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GeneralSpec) Update() *GeneralSpecUpdateOne {
	return NewGeneralSpecClient(gs.config).UpdateOne(gs)
}

// Unwrap unwraps the GeneralSpec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GeneralSpec) Unwrap() *GeneralSpec {
	_tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GeneralSpec is not a transactional entity")
	}
	gs.config.driver = _tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GeneralSpec) String() string {
	var builder strings.Builder
	builder.WriteString("GeneralSpec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gs.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", gs.UUID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gs.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(gs.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(gs.Status)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(gs.Description)
	builder.WriteByte(')')
	return builder.String()
}

// GeneralSpecs is a parsable slice of GeneralSpec.
type GeneralSpecs []*GeneralSpec
