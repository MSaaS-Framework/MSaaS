// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (pu *ProjectUpdate) AddServiceIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddServiceIDs(ids...)
	return pu
}

// AddServices adds the "services" edges to the Service entity.
func (pu *ProjectUpdate) AddServices(s ...*Service) *ProjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddServiceIDs(ids...)
}

// AddDatabaseIDs adds the "databases" edge to the Database entity by IDs.
func (pu *ProjectUpdate) AddDatabaseIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddDatabaseIDs(ids...)
	return pu
}

// AddDatabases adds the "databases" edges to the Database entity.
func (pu *ProjectUpdate) AddDatabases(d ...*Database) *ProjectUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDatabaseIDs(ids...)
}

// AddApispecIDs adds the "apispecs" edge to the APISpec entity by IDs.
func (pu *ProjectUpdate) AddApispecIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddApispecIDs(ids...)
	return pu
}

// AddApispecs adds the "apispecs" edges to the APISpec entity.
func (pu *ProjectUpdate) AddApispecs(a ...*APISpec) *ProjectUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddApispecIDs(ids...)
}

// SetGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID.
func (pu *ProjectUpdate) SetGeneralspecID(id int) *ProjectUpdate {
	pu.mutation.SetGeneralspecID(id)
	return pu
}

// SetNillableGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGeneralspecID(id *int) *ProjectUpdate {
	if id != nil {
		pu = pu.SetGeneralspecID(*id)
	}
	return pu
}

// SetGeneralspec sets the "generalspec" edge to the GeneralSpec entity.
func (pu *ProjectUpdate) SetGeneralspec(g *GeneralSpec) *ProjectUpdate {
	return pu.SetGeneralspecID(g.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearServices clears all "services" edges to the Service entity.
func (pu *ProjectUpdate) ClearServices() *ProjectUpdate {
	pu.mutation.ClearServices()
	return pu
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (pu *ProjectUpdate) RemoveServiceIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveServiceIDs(ids...)
	return pu
}

// RemoveServices removes "services" edges to Service entities.
func (pu *ProjectUpdate) RemoveServices(s ...*Service) *ProjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveServiceIDs(ids...)
}

// ClearDatabases clears all "databases" edges to the Database entity.
func (pu *ProjectUpdate) ClearDatabases() *ProjectUpdate {
	pu.mutation.ClearDatabases()
	return pu
}

// RemoveDatabaseIDs removes the "databases" edge to Database entities by IDs.
func (pu *ProjectUpdate) RemoveDatabaseIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveDatabaseIDs(ids...)
	return pu
}

// RemoveDatabases removes "databases" edges to Database entities.
func (pu *ProjectUpdate) RemoveDatabases(d ...*Database) *ProjectUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDatabaseIDs(ids...)
}

// ClearApispecs clears all "apispecs" edges to the APISpec entity.
func (pu *ProjectUpdate) ClearApispecs() *ProjectUpdate {
	pu.mutation.ClearApispecs()
	return pu
}

// RemoveApispecIDs removes the "apispecs" edge to APISpec entities by IDs.
func (pu *ProjectUpdate) RemoveApispecIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveApispecIDs(ids...)
	return pu
}

// RemoveApispecs removes "apispecs" edges to APISpec entities.
func (pu *ProjectUpdate) RemoveApispecs(a ...*APISpec) *ProjectUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveApispecIDs(ids...)
}

// ClearGeneralspec clears the "generalspec" edge to the GeneralSpec entity.
func (pu *ProjectUpdate) ClearGeneralspec() *ProjectUpdate {
	pu.mutation.ClearGeneralspec()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !pu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DatabasesTable,
			Columns: []string{project.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDatabasesIDs(); len(nodes) > 0 && !pu.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DatabasesTable,
			Columns: []string{project.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DatabasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DatabasesTable,
			Columns: []string{project.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ApispecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ApispecsTable,
			Columns: []string{project.ApispecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedApispecsIDs(); len(nodes) > 0 && !pu.mutation.ApispecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ApispecsTable,
			Columns: []string{project.ApispecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ApispecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ApispecsTable,
			Columns: []string{project.ApispecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.GeneralspecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   project.GeneralspecTable,
			Columns: []string{project.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GeneralspecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   project.GeneralspecTable,
			Columns: []string{project.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (puo *ProjectUpdateOne) AddServiceIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddServiceIDs(ids...)
	return puo
}

// AddServices adds the "services" edges to the Service entity.
func (puo *ProjectUpdateOne) AddServices(s ...*Service) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddServiceIDs(ids...)
}

// AddDatabaseIDs adds the "databases" edge to the Database entity by IDs.
func (puo *ProjectUpdateOne) AddDatabaseIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddDatabaseIDs(ids...)
	return puo
}

// AddDatabases adds the "databases" edges to the Database entity.
func (puo *ProjectUpdateOne) AddDatabases(d ...*Database) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDatabaseIDs(ids...)
}

// AddApispecIDs adds the "apispecs" edge to the APISpec entity by IDs.
func (puo *ProjectUpdateOne) AddApispecIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddApispecIDs(ids...)
	return puo
}

// AddApispecs adds the "apispecs" edges to the APISpec entity.
func (puo *ProjectUpdateOne) AddApispecs(a ...*APISpec) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddApispecIDs(ids...)
}

// SetGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID.
func (puo *ProjectUpdateOne) SetGeneralspecID(id int) *ProjectUpdateOne {
	puo.mutation.SetGeneralspecID(id)
	return puo
}

// SetNillableGeneralspecID sets the "generalspec" edge to the GeneralSpec entity by ID if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGeneralspecID(id *int) *ProjectUpdateOne {
	if id != nil {
		puo = puo.SetGeneralspecID(*id)
	}
	return puo
}

// SetGeneralspec sets the "generalspec" edge to the GeneralSpec entity.
func (puo *ProjectUpdateOne) SetGeneralspec(g *GeneralSpec) *ProjectUpdateOne {
	return puo.SetGeneralspecID(g.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearServices clears all "services" edges to the Service entity.
func (puo *ProjectUpdateOne) ClearServices() *ProjectUpdateOne {
	puo.mutation.ClearServices()
	return puo
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (puo *ProjectUpdateOne) RemoveServiceIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveServiceIDs(ids...)
	return puo
}

// RemoveServices removes "services" edges to Service entities.
func (puo *ProjectUpdateOne) RemoveServices(s ...*Service) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveServiceIDs(ids...)
}

// ClearDatabases clears all "databases" edges to the Database entity.
func (puo *ProjectUpdateOne) ClearDatabases() *ProjectUpdateOne {
	puo.mutation.ClearDatabases()
	return puo
}

// RemoveDatabaseIDs removes the "databases" edge to Database entities by IDs.
func (puo *ProjectUpdateOne) RemoveDatabaseIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveDatabaseIDs(ids...)
	return puo
}

// RemoveDatabases removes "databases" edges to Database entities.
func (puo *ProjectUpdateOne) RemoveDatabases(d ...*Database) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDatabaseIDs(ids...)
}

// ClearApispecs clears all "apispecs" edges to the APISpec entity.
func (puo *ProjectUpdateOne) ClearApispecs() *ProjectUpdateOne {
	puo.mutation.ClearApispecs()
	return puo
}

// RemoveApispecIDs removes the "apispecs" edge to APISpec entities by IDs.
func (puo *ProjectUpdateOne) RemoveApispecIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveApispecIDs(ids...)
	return puo
}

// RemoveApispecs removes "apispecs" edges to APISpec entities.
func (puo *ProjectUpdateOne) RemoveApispecs(a ...*APISpec) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveApispecIDs(ids...)
}

// ClearGeneralspec clears the "generalspec" edge to the GeneralSpec entity.
func (puo *ProjectUpdateOne) ClearGeneralspec() *ProjectUpdateOne {
	puo.mutation.ClearGeneralspec()
	return puo
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !puo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DatabasesTable,
			Columns: []string{project.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDatabasesIDs(); len(nodes) > 0 && !puo.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DatabasesTable,
			Columns: []string{project.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DatabasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DatabasesTable,
			Columns: []string{project.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ApispecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ApispecsTable,
			Columns: []string{project.ApispecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedApispecsIDs(); len(nodes) > 0 && !puo.mutation.ApispecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ApispecsTable,
			Columns: []string{project.ApispecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ApispecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ApispecsTable,
			Columns: []string{project.ApispecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.GeneralspecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   project.GeneralspecTable,
			Columns: []string{project.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GeneralspecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   project.GeneralspecTable,
			Columns: []string{project.GeneralspecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
