// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/user"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/usergeneralspecpermissions"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserGeneralSpecPermissionsQuery is the builder for querying UserGeneralSpecPermissions entities.
type UserGeneralSpecPermissionsQuery struct {
	config
	ctx             *QueryContext
	order           []usergeneralspecpermissions.OrderOption
	inters          []Interceptor
	predicates      []predicate.UserGeneralSpecPermissions
	withUser        *UserQuery
	withGeneralSpec *GeneralSpecQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserGeneralSpecPermissionsQuery builder.
func (ugspq *UserGeneralSpecPermissionsQuery) Where(ps ...predicate.UserGeneralSpecPermissions) *UserGeneralSpecPermissionsQuery {
	ugspq.predicates = append(ugspq.predicates, ps...)
	return ugspq
}

// Limit the number of records to be returned by this query.
func (ugspq *UserGeneralSpecPermissionsQuery) Limit(limit int) *UserGeneralSpecPermissionsQuery {
	ugspq.ctx.Limit = &limit
	return ugspq
}

// Offset to start from.
func (ugspq *UserGeneralSpecPermissionsQuery) Offset(offset int) *UserGeneralSpecPermissionsQuery {
	ugspq.ctx.Offset = &offset
	return ugspq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ugspq *UserGeneralSpecPermissionsQuery) Unique(unique bool) *UserGeneralSpecPermissionsQuery {
	ugspq.ctx.Unique = &unique
	return ugspq
}

// Order specifies how the records should be ordered.
func (ugspq *UserGeneralSpecPermissionsQuery) Order(o ...usergeneralspecpermissions.OrderOption) *UserGeneralSpecPermissionsQuery {
	ugspq.order = append(ugspq.order, o...)
	return ugspq
}

// QueryUser chains the current query on the "user" edge.
func (ugspq *UserGeneralSpecPermissionsQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ugspq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ugspq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ugspq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usergeneralspecpermissions.Table, usergeneralspecpermissions.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usergeneralspecpermissions.UserTable, usergeneralspecpermissions.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ugspq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGeneralSpec chains the current query on the "general_spec" edge.
func (ugspq *UserGeneralSpecPermissionsQuery) QueryGeneralSpec() *GeneralSpecQuery {
	query := (&GeneralSpecClient{config: ugspq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ugspq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ugspq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usergeneralspecpermissions.Table, usergeneralspecpermissions.FieldID, selector),
			sqlgraph.To(generalspec.Table, generalspec.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usergeneralspecpermissions.GeneralSpecTable, usergeneralspecpermissions.GeneralSpecColumn),
		)
		fromU = sqlgraph.SetNeighbors(ugspq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserGeneralSpecPermissions entity from the query.
// Returns a *NotFoundError when no UserGeneralSpecPermissions was found.
func (ugspq *UserGeneralSpecPermissionsQuery) First(ctx context.Context) (*UserGeneralSpecPermissions, error) {
	nodes, err := ugspq.Limit(1).All(setContextOp(ctx, ugspq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usergeneralspecpermissions.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) FirstX(ctx context.Context) *UserGeneralSpecPermissions {
	node, err := ugspq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserGeneralSpecPermissions ID from the query.
// Returns a *NotFoundError when no UserGeneralSpecPermissions ID was found.
func (ugspq *UserGeneralSpecPermissionsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ugspq.Limit(1).IDs(setContextOp(ctx, ugspq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usergeneralspecpermissions.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ugspq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserGeneralSpecPermissions entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserGeneralSpecPermissions entity is found.
// Returns a *NotFoundError when no UserGeneralSpecPermissions entities are found.
func (ugspq *UserGeneralSpecPermissionsQuery) Only(ctx context.Context) (*UserGeneralSpecPermissions, error) {
	nodes, err := ugspq.Limit(2).All(setContextOp(ctx, ugspq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usergeneralspecpermissions.Label}
	default:
		return nil, &NotSingularError{usergeneralspecpermissions.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) OnlyX(ctx context.Context) *UserGeneralSpecPermissions {
	node, err := ugspq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserGeneralSpecPermissions ID in the query.
// Returns a *NotSingularError when more than one UserGeneralSpecPermissions ID is found.
// Returns a *NotFoundError when no entities are found.
func (ugspq *UserGeneralSpecPermissionsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ugspq.Limit(2).IDs(setContextOp(ctx, ugspq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usergeneralspecpermissions.Label}
	default:
		err = &NotSingularError{usergeneralspecpermissions.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ugspq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserGeneralSpecPermissionsSlice.
func (ugspq *UserGeneralSpecPermissionsQuery) All(ctx context.Context) ([]*UserGeneralSpecPermissions, error) {
	ctx = setContextOp(ctx, ugspq.ctx, ent.OpQueryAll)
	if err := ugspq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserGeneralSpecPermissions, *UserGeneralSpecPermissionsQuery]()
	return withInterceptors[[]*UserGeneralSpecPermissions](ctx, ugspq, qr, ugspq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) AllX(ctx context.Context) []*UserGeneralSpecPermissions {
	nodes, err := ugspq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserGeneralSpecPermissions IDs.
func (ugspq *UserGeneralSpecPermissionsQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ugspq.ctx.Unique == nil && ugspq.path != nil {
		ugspq.Unique(true)
	}
	ctx = setContextOp(ctx, ugspq.ctx, ent.OpQueryIDs)
	if err = ugspq.Select(usergeneralspecpermissions.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ugspq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ugspq *UserGeneralSpecPermissionsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ugspq.ctx, ent.OpQueryCount)
	if err := ugspq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ugspq, querierCount[*UserGeneralSpecPermissionsQuery](), ugspq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) CountX(ctx context.Context) int {
	count, err := ugspq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ugspq *UserGeneralSpecPermissionsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ugspq.ctx, ent.OpQueryExist)
	switch _, err := ugspq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ugspq *UserGeneralSpecPermissionsQuery) ExistX(ctx context.Context) bool {
	exist, err := ugspq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserGeneralSpecPermissionsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ugspq *UserGeneralSpecPermissionsQuery) Clone() *UserGeneralSpecPermissionsQuery {
	if ugspq == nil {
		return nil
	}
	return &UserGeneralSpecPermissionsQuery{
		config:          ugspq.config,
		ctx:             ugspq.ctx.Clone(),
		order:           append([]usergeneralspecpermissions.OrderOption{}, ugspq.order...),
		inters:          append([]Interceptor{}, ugspq.inters...),
		predicates:      append([]predicate.UserGeneralSpecPermissions{}, ugspq.predicates...),
		withUser:        ugspq.withUser.Clone(),
		withGeneralSpec: ugspq.withGeneralSpec.Clone(),
		// clone intermediate query.
		sql:  ugspq.sql.Clone(),
		path: ugspq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ugspq *UserGeneralSpecPermissionsQuery) WithUser(opts ...func(*UserQuery)) *UserGeneralSpecPermissionsQuery {
	query := (&UserClient{config: ugspq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ugspq.withUser = query
	return ugspq
}

// WithGeneralSpec tells the query-builder to eager-load the nodes that are connected to
// the "general_spec" edge. The optional arguments are used to configure the query builder of the edge.
func (ugspq *UserGeneralSpecPermissionsQuery) WithGeneralSpec(opts ...func(*GeneralSpecQuery)) *UserGeneralSpecPermissionsQuery {
	query := (&GeneralSpecClient{config: ugspq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ugspq.withGeneralSpec = query
	return ugspq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Permission usergeneralspecpermissions.Permission `json:"permission,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserGeneralSpecPermissions.Query().
//		GroupBy(usergeneralspecpermissions.FieldPermission).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ugspq *UserGeneralSpecPermissionsQuery) GroupBy(field string, fields ...string) *UserGeneralSpecPermissionsGroupBy {
	ugspq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGeneralSpecPermissionsGroupBy{build: ugspq}
	grbuild.flds = &ugspq.ctx.Fields
	grbuild.label = usergeneralspecpermissions.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Permission usergeneralspecpermissions.Permission `json:"permission,omitempty"`
//	}
//
//	client.UserGeneralSpecPermissions.Query().
//		Select(usergeneralspecpermissions.FieldPermission).
//		Scan(ctx, &v)
func (ugspq *UserGeneralSpecPermissionsQuery) Select(fields ...string) *UserGeneralSpecPermissionsSelect {
	ugspq.ctx.Fields = append(ugspq.ctx.Fields, fields...)
	sbuild := &UserGeneralSpecPermissionsSelect{UserGeneralSpecPermissionsQuery: ugspq}
	sbuild.label = usergeneralspecpermissions.Label
	sbuild.flds, sbuild.scan = &ugspq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserGeneralSpecPermissionsSelect configured with the given aggregations.
func (ugspq *UserGeneralSpecPermissionsQuery) Aggregate(fns ...AggregateFunc) *UserGeneralSpecPermissionsSelect {
	return ugspq.Select().Aggregate(fns...)
}

func (ugspq *UserGeneralSpecPermissionsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ugspq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ugspq); err != nil {
				return err
			}
		}
	}
	for _, f := range ugspq.ctx.Fields {
		if !usergeneralspecpermissions.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ugspq.path != nil {
		prev, err := ugspq.path(ctx)
		if err != nil {
			return err
		}
		ugspq.sql = prev
	}
	return nil
}

func (ugspq *UserGeneralSpecPermissionsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserGeneralSpecPermissions, error) {
	var (
		nodes       = []*UserGeneralSpecPermissions{}
		withFKs     = ugspq.withFKs
		_spec       = ugspq.querySpec()
		loadedTypes = [2]bool{
			ugspq.withUser != nil,
			ugspq.withGeneralSpec != nil,
		}
	)
	if ugspq.withUser != nil || ugspq.withGeneralSpec != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, usergeneralspecpermissions.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserGeneralSpecPermissions).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserGeneralSpecPermissions{config: ugspq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ugspq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ugspq.withUser; query != nil {
		if err := ugspq.loadUser(ctx, query, nodes, nil,
			func(n *UserGeneralSpecPermissions, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ugspq.withGeneralSpec; query != nil {
		if err := ugspq.loadGeneralSpec(ctx, query, nodes, nil,
			func(n *UserGeneralSpecPermissions, e *GeneralSpec) { n.Edges.GeneralSpec = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ugspq *UserGeneralSpecPermissionsQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserGeneralSpecPermissions, init func(*UserGeneralSpecPermissions), assign func(*UserGeneralSpecPermissions, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UserGeneralSpecPermissions)
	for i := range nodes {
		if nodes[i].user_permissions == nil {
			continue
		}
		fk := *nodes[i].user_permissions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_permissions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ugspq *UserGeneralSpecPermissionsQuery) loadGeneralSpec(ctx context.Context, query *GeneralSpecQuery, nodes []*UserGeneralSpecPermissions, init func(*UserGeneralSpecPermissions), assign func(*UserGeneralSpecPermissions, *GeneralSpec)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserGeneralSpecPermissions)
	for i := range nodes {
		if nodes[i].general_spec_permissions == nil {
			continue
		}
		fk := *nodes[i].general_spec_permissions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(generalspec.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "general_spec_permissions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ugspq *UserGeneralSpecPermissionsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ugspq.querySpec()
	_spec.Node.Columns = ugspq.ctx.Fields
	if len(ugspq.ctx.Fields) > 0 {
		_spec.Unique = ugspq.ctx.Unique != nil && *ugspq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ugspq.driver, _spec)
}

func (ugspq *UserGeneralSpecPermissionsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usergeneralspecpermissions.Table, usergeneralspecpermissions.Columns, sqlgraph.NewFieldSpec(usergeneralspecpermissions.FieldID, field.TypeUUID))
	_spec.From = ugspq.sql
	if unique := ugspq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ugspq.path != nil {
		_spec.Unique = true
	}
	if fields := ugspq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usergeneralspecpermissions.FieldID)
		for i := range fields {
			if fields[i] != usergeneralspecpermissions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ugspq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ugspq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ugspq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ugspq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ugspq *UserGeneralSpecPermissionsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ugspq.driver.Dialect())
	t1 := builder.Table(usergeneralspecpermissions.Table)
	columns := ugspq.ctx.Fields
	if len(columns) == 0 {
		columns = usergeneralspecpermissions.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ugspq.sql != nil {
		selector = ugspq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ugspq.ctx.Unique != nil && *ugspq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ugspq.predicates {
		p(selector)
	}
	for _, p := range ugspq.order {
		p(selector)
	}
	if offset := ugspq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ugspq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGeneralSpecPermissionsGroupBy is the group-by builder for UserGeneralSpecPermissions entities.
type UserGeneralSpecPermissionsGroupBy struct {
	selector
	build *UserGeneralSpecPermissionsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugspgb *UserGeneralSpecPermissionsGroupBy) Aggregate(fns ...AggregateFunc) *UserGeneralSpecPermissionsGroupBy {
	ugspgb.fns = append(ugspgb.fns, fns...)
	return ugspgb
}

// Scan applies the selector query and scans the result into the given value.
func (ugspgb *UserGeneralSpecPermissionsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugspgb.build.ctx, ent.OpQueryGroupBy)
	if err := ugspgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserGeneralSpecPermissionsQuery, *UserGeneralSpecPermissionsGroupBy](ctx, ugspgb.build, ugspgb, ugspgb.build.inters, v)
}

func (ugspgb *UserGeneralSpecPermissionsGroupBy) sqlScan(ctx context.Context, root *UserGeneralSpecPermissionsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugspgb.fns))
	for _, fn := range ugspgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugspgb.flds)+len(ugspgb.fns))
		for _, f := range *ugspgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugspgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugspgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserGeneralSpecPermissionsSelect is the builder for selecting fields of UserGeneralSpecPermissions entities.
type UserGeneralSpecPermissionsSelect struct {
	*UserGeneralSpecPermissionsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ugsps *UserGeneralSpecPermissionsSelect) Aggregate(fns ...AggregateFunc) *UserGeneralSpecPermissionsSelect {
	ugsps.fns = append(ugsps.fns, fns...)
	return ugsps
}

// Scan applies the selector query and scans the result into the given value.
func (ugsps *UserGeneralSpecPermissionsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugsps.ctx, ent.OpQuerySelect)
	if err := ugsps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserGeneralSpecPermissionsQuery, *UserGeneralSpecPermissionsSelect](ctx, ugsps.UserGeneralSpecPermissionsQuery, ugsps, ugsps.inters, v)
}

func (ugsps *UserGeneralSpecPermissionsSelect) sqlScan(ctx context.Context, root *UserGeneralSpecPermissionsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ugsps.fns))
	for _, fn := range ugsps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ugsps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugsps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
