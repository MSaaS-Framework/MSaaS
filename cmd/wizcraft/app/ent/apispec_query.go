// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// APISpecQuery is the builder for querying APISpec entities.
type APISpecQuery struct {
	config
	ctx             *QueryContext
	order           []apispec.OrderOption
	inters          []Interceptor
	predicates      []predicate.APISpec
	withService     *ServiceQuery
	withProject     *ProjectQuery
	withGeneralspec *GeneralSpecQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the APISpecQuery builder.
func (asq *APISpecQuery) Where(ps ...predicate.APISpec) *APISpecQuery {
	asq.predicates = append(asq.predicates, ps...)
	return asq
}

// Limit the number of records to be returned by this query.
func (asq *APISpecQuery) Limit(limit int) *APISpecQuery {
	asq.ctx.Limit = &limit
	return asq
}

// Offset to start from.
func (asq *APISpecQuery) Offset(offset int) *APISpecQuery {
	asq.ctx.Offset = &offset
	return asq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (asq *APISpecQuery) Unique(unique bool) *APISpecQuery {
	asq.ctx.Unique = &unique
	return asq
}

// Order specifies how the records should be ordered.
func (asq *APISpecQuery) Order(o ...apispec.OrderOption) *APISpecQuery {
	asq.order = append(asq.order, o...)
	return asq
}

// QueryService chains the current query on the "service" edge.
func (asq *APISpecQuery) QueryService() *ServiceQuery {
	query := (&ServiceClient{config: asq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apispec.Table, apispec.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, apispec.ServiceTable, apispec.ServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (asq *APISpecQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: asq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apispec.Table, apispec.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apispec.ProjectTable, apispec.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGeneralspec chains the current query on the "generalspec" edge.
func (asq *APISpecQuery) QueryGeneralspec() *GeneralSpecQuery {
	query := (&GeneralSpecClient{config: asq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apispec.Table, apispec.FieldID, selector),
			sqlgraph.To(generalspec.Table, generalspec.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, apispec.GeneralspecTable, apispec.GeneralspecColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first APISpec entity from the query.
// Returns a *NotFoundError when no APISpec was found.
func (asq *APISpecQuery) First(ctx context.Context) (*APISpec, error) {
	nodes, err := asq.Limit(1).All(setContextOp(ctx, asq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{apispec.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (asq *APISpecQuery) FirstX(ctx context.Context) *APISpec {
	node, err := asq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first APISpec ID from the query.
// Returns a *NotFoundError when no APISpec ID was found.
func (asq *APISpecQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = asq.Limit(1).IDs(setContextOp(ctx, asq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{apispec.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (asq *APISpecQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := asq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single APISpec entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one APISpec entity is found.
// Returns a *NotFoundError when no APISpec entities are found.
func (asq *APISpecQuery) Only(ctx context.Context) (*APISpec, error) {
	nodes, err := asq.Limit(2).All(setContextOp(ctx, asq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{apispec.Label}
	default:
		return nil, &NotSingularError{apispec.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (asq *APISpecQuery) OnlyX(ctx context.Context) *APISpec {
	node, err := asq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only APISpec ID in the query.
// Returns a *NotSingularError when more than one APISpec ID is found.
// Returns a *NotFoundError when no entities are found.
func (asq *APISpecQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = asq.Limit(2).IDs(setContextOp(ctx, asq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{apispec.Label}
	default:
		err = &NotSingularError{apispec.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (asq *APISpecQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := asq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of APISpecs.
func (asq *APISpecQuery) All(ctx context.Context) ([]*APISpec, error) {
	ctx = setContextOp(ctx, asq.ctx, ent.OpQueryAll)
	if err := asq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*APISpec, *APISpecQuery]()
	return withInterceptors[[]*APISpec](ctx, asq, qr, asq.inters)
}

// AllX is like All, but panics if an error occurs.
func (asq *APISpecQuery) AllX(ctx context.Context) []*APISpec {
	nodes, err := asq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of APISpec IDs.
func (asq *APISpecQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if asq.ctx.Unique == nil && asq.path != nil {
		asq.Unique(true)
	}
	ctx = setContextOp(ctx, asq.ctx, ent.OpQueryIDs)
	if err = asq.Select(apispec.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (asq *APISpecQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := asq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (asq *APISpecQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, asq.ctx, ent.OpQueryCount)
	if err := asq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, asq, querierCount[*APISpecQuery](), asq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (asq *APISpecQuery) CountX(ctx context.Context) int {
	count, err := asq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (asq *APISpecQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, asq.ctx, ent.OpQueryExist)
	switch _, err := asq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (asq *APISpecQuery) ExistX(ctx context.Context) bool {
	exist, err := asq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the APISpecQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (asq *APISpecQuery) Clone() *APISpecQuery {
	if asq == nil {
		return nil
	}
	return &APISpecQuery{
		config:          asq.config,
		ctx:             asq.ctx.Clone(),
		order:           append([]apispec.OrderOption{}, asq.order...),
		inters:          append([]Interceptor{}, asq.inters...),
		predicates:      append([]predicate.APISpec{}, asq.predicates...),
		withService:     asq.withService.Clone(),
		withProject:     asq.withProject.Clone(),
		withGeneralspec: asq.withGeneralspec.Clone(),
		// clone intermediate query.
		sql:  asq.sql.Clone(),
		path: asq.path,
	}
}

// WithService tells the query-builder to eager-load the nodes that are connected to
// the "service" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *APISpecQuery) WithService(opts ...func(*ServiceQuery)) *APISpecQuery {
	query := (&ServiceClient{config: asq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asq.withService = query
	return asq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *APISpecQuery) WithProject(opts ...func(*ProjectQuery)) *APISpecQuery {
	query := (&ProjectClient{config: asq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asq.withProject = query
	return asq
}

// WithGeneralspec tells the query-builder to eager-load the nodes that are connected to
// the "generalspec" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *APISpecQuery) WithGeneralspec(opts ...func(*GeneralSpecQuery)) *APISpecQuery {
	query := (&GeneralSpecClient{config: asq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asq.withGeneralspec = query
	return asq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OpenapiSpec []uint8 `json:"openapi_spec,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.APISpec.Query().
//		GroupBy(apispec.FieldOpenapiSpec).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (asq *APISpecQuery) GroupBy(field string, fields ...string) *APISpecGroupBy {
	asq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &APISpecGroupBy{build: asq}
	grbuild.flds = &asq.ctx.Fields
	grbuild.label = apispec.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OpenapiSpec []uint8 `json:"openapi_spec,omitempty"`
//	}
//
//	client.APISpec.Query().
//		Select(apispec.FieldOpenapiSpec).
//		Scan(ctx, &v)
func (asq *APISpecQuery) Select(fields ...string) *APISpecSelect {
	asq.ctx.Fields = append(asq.ctx.Fields, fields...)
	sbuild := &APISpecSelect{APISpecQuery: asq}
	sbuild.label = apispec.Label
	sbuild.flds, sbuild.scan = &asq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a APISpecSelect configured with the given aggregations.
func (asq *APISpecQuery) Aggregate(fns ...AggregateFunc) *APISpecSelect {
	return asq.Select().Aggregate(fns...)
}

func (asq *APISpecQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range asq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, asq); err != nil {
				return err
			}
		}
	}
	for _, f := range asq.ctx.Fields {
		if !apispec.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if asq.path != nil {
		prev, err := asq.path(ctx)
		if err != nil {
			return err
		}
		asq.sql = prev
	}
	return nil
}

func (asq *APISpecQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*APISpec, error) {
	var (
		nodes       = []*APISpec{}
		withFKs     = asq.withFKs
		_spec       = asq.querySpec()
		loadedTypes = [3]bool{
			asq.withService != nil,
			asq.withProject != nil,
			asq.withGeneralspec != nil,
		}
	)
	if asq.withService != nil || asq.withProject != nil || asq.withGeneralspec != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, apispec.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*APISpec).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &APISpec{config: asq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, asq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := asq.withService; query != nil {
		if err := asq.loadService(ctx, query, nodes, nil,
			func(n *APISpec, e *Service) { n.Edges.Service = e }); err != nil {
			return nil, err
		}
	}
	if query := asq.withProject; query != nil {
		if err := asq.loadProject(ctx, query, nodes, nil,
			func(n *APISpec, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := asq.withGeneralspec; query != nil {
		if err := asq.loadGeneralspec(ctx, query, nodes, nil,
			func(n *APISpec, e *GeneralSpec) { n.Edges.Generalspec = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (asq *APISpecQuery) loadService(ctx context.Context, query *ServiceQuery, nodes []*APISpec, init func(*APISpec), assign func(*APISpec, *Service)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*APISpec)
	for i := range nodes {
		if nodes[i].service_apispec == nil {
			continue
		}
		fk := *nodes[i].service_apispec
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(service.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "service_apispec" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (asq *APISpecQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*APISpec, init func(*APISpec), assign func(*APISpec, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*APISpec)
	for i := range nodes {
		if nodes[i].project_apispecs == nil {
			continue
		}
		fk := *nodes[i].project_apispecs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_apispecs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (asq *APISpecQuery) loadGeneralspec(ctx context.Context, query *GeneralSpecQuery, nodes []*APISpec, init func(*APISpec), assign func(*APISpec, *GeneralSpec)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*APISpec)
	for i := range nodes {
		if nodes[i].general_spec_apispec == nil {
			continue
		}
		fk := *nodes[i].general_spec_apispec
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(generalspec.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "general_spec_apispec" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (asq *APISpecQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := asq.querySpec()
	_spec.Node.Columns = asq.ctx.Fields
	if len(asq.ctx.Fields) > 0 {
		_spec.Unique = asq.ctx.Unique != nil && *asq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, asq.driver, _spec)
}

func (asq *APISpecQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(apispec.Table, apispec.Columns, sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID))
	_spec.From = asq.sql
	if unique := asq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if asq.path != nil {
		_spec.Unique = true
	}
	if fields := asq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apispec.FieldID)
		for i := range fields {
			if fields[i] != apispec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := asq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := asq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := asq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := asq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (asq *APISpecQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(asq.driver.Dialect())
	t1 := builder.Table(apispec.Table)
	columns := asq.ctx.Fields
	if len(columns) == 0 {
		columns = apispec.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if asq.sql != nil {
		selector = asq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if asq.ctx.Unique != nil && *asq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range asq.predicates {
		p(selector)
	}
	for _, p := range asq.order {
		p(selector)
	}
	if offset := asq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := asq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// APISpecGroupBy is the group-by builder for APISpec entities.
type APISpecGroupBy struct {
	selector
	build *APISpecQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (asgb *APISpecGroupBy) Aggregate(fns ...AggregateFunc) *APISpecGroupBy {
	asgb.fns = append(asgb.fns, fns...)
	return asgb
}

// Scan applies the selector query and scans the result into the given value.
func (asgb *APISpecGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, asgb.build.ctx, ent.OpQueryGroupBy)
	if err := asgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*APISpecQuery, *APISpecGroupBy](ctx, asgb.build, asgb, asgb.build.inters, v)
}

func (asgb *APISpecGroupBy) sqlScan(ctx context.Context, root *APISpecQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(asgb.fns))
	for _, fn := range asgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*asgb.flds)+len(asgb.fns))
		for _, f := range *asgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*asgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// APISpecSelect is the builder for selecting fields of APISpec entities.
type APISpecSelect struct {
	*APISpecQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ass *APISpecSelect) Aggregate(fns ...AggregateFunc) *APISpecSelect {
	ass.fns = append(ass.fns, fns...)
	return ass
}

// Scan applies the selector query and scans the result into the given value.
func (ass *APISpecSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ass.ctx, ent.OpQuerySelect)
	if err := ass.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*APISpecQuery, *APISpecSelect](ctx, ass.APISpecQuery, ass, ass.inters, v)
}

func (ass *APISpecSelect) sqlScan(ctx context.Context, root *APISpecQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ass.fns))
	for _, fn := range ass.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ass.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ass.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
