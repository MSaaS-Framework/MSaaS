// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/apispec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/database"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/generalspec"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/predicate"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/project"
	"MSaaS-Framework/MSaaS/cmd/wizcraft/app/ent/service"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GeneralSpecUpdate is the builder for updating GeneralSpec entities.
type GeneralSpecUpdate struct {
	config
	hooks    []Hook
	mutation *GeneralSpecMutation
}

// Where appends a list predicates to the GeneralSpecUpdate builder.
func (gsu *GeneralSpecUpdate) Where(ps ...predicate.GeneralSpec) *GeneralSpecUpdate {
	gsu.mutation.Where(ps...)
	return gsu
}

// SetUUID sets the "uuid" field.
func (gsu *GeneralSpecUpdate) SetUUID(u uuid.UUID) *GeneralSpecUpdate {
	gsu.mutation.SetUUID(u)
	return gsu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableUUID(u *uuid.UUID) *GeneralSpecUpdate {
	if u != nil {
		gsu.SetUUID(*u)
	}
	return gsu
}

// SetName sets the "name" field.
func (gsu *GeneralSpecUpdate) SetName(s string) *GeneralSpecUpdate {
	gsu.mutation.SetName(s)
	return gsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableName(s *string) *GeneralSpecUpdate {
	if s != nil {
		gsu.SetName(*s)
	}
	return gsu
}

// SetType sets the "type" field.
func (gsu *GeneralSpecUpdate) SetType(s string) *GeneralSpecUpdate {
	gsu.mutation.SetType(s)
	return gsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableType(s *string) *GeneralSpecUpdate {
	if s != nil {
		gsu.SetType(*s)
	}
	return gsu
}

// SetStatus sets the "status" field.
func (gsu *GeneralSpecUpdate) SetStatus(s string) *GeneralSpecUpdate {
	gsu.mutation.SetStatus(s)
	return gsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableStatus(s *string) *GeneralSpecUpdate {
	if s != nil {
		gsu.SetStatus(*s)
	}
	return gsu
}

// SetDescription sets the "description" field.
func (gsu *GeneralSpecUpdate) SetDescription(s string) *GeneralSpecUpdate {
	gsu.mutation.SetDescription(s)
	return gsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableDescription(s *string) *GeneralSpecUpdate {
	if s != nil {
		gsu.SetDescription(*s)
	}
	return gsu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (gsu *GeneralSpecUpdate) SetServiceID(id uuid.UUID) *GeneralSpecUpdate {
	gsu.mutation.SetServiceID(id)
	return gsu
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableServiceID(id *uuid.UUID) *GeneralSpecUpdate {
	if id != nil {
		gsu = gsu.SetServiceID(*id)
	}
	return gsu
}

// SetService sets the "service" edge to the Service entity.
func (gsu *GeneralSpecUpdate) SetService(s *Service) *GeneralSpecUpdate {
	return gsu.SetServiceID(s.ID)
}

// SetDatabaseID sets the "database" edge to the Database entity by ID.
func (gsu *GeneralSpecUpdate) SetDatabaseID(id uuid.UUID) *GeneralSpecUpdate {
	gsu.mutation.SetDatabaseID(id)
	return gsu
}

// SetNillableDatabaseID sets the "database" edge to the Database entity by ID if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableDatabaseID(id *uuid.UUID) *GeneralSpecUpdate {
	if id != nil {
		gsu = gsu.SetDatabaseID(*id)
	}
	return gsu
}

// SetDatabase sets the "database" edge to the Database entity.
func (gsu *GeneralSpecUpdate) SetDatabase(d *Database) *GeneralSpecUpdate {
	return gsu.SetDatabaseID(d.ID)
}

// SetApispecID sets the "apispec" edge to the APISpec entity by ID.
func (gsu *GeneralSpecUpdate) SetApispecID(id uuid.UUID) *GeneralSpecUpdate {
	gsu.mutation.SetApispecID(id)
	return gsu
}

// SetNillableApispecID sets the "apispec" edge to the APISpec entity by ID if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableApispecID(id *uuid.UUID) *GeneralSpecUpdate {
	if id != nil {
		gsu = gsu.SetApispecID(*id)
	}
	return gsu
}

// SetApispec sets the "apispec" edge to the APISpec entity.
func (gsu *GeneralSpecUpdate) SetApispec(a *APISpec) *GeneralSpecUpdate {
	return gsu.SetApispecID(a.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (gsu *GeneralSpecUpdate) SetProjectID(id uuid.UUID) *GeneralSpecUpdate {
	gsu.mutation.SetProjectID(id)
	return gsu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (gsu *GeneralSpecUpdate) SetNillableProjectID(id *uuid.UUID) *GeneralSpecUpdate {
	if id != nil {
		gsu = gsu.SetProjectID(*id)
	}
	return gsu
}

// SetProject sets the "project" edge to the Project entity.
func (gsu *GeneralSpecUpdate) SetProject(p *Project) *GeneralSpecUpdate {
	return gsu.SetProjectID(p.ID)
}

// Mutation returns the GeneralSpecMutation object of the builder.
func (gsu *GeneralSpecUpdate) Mutation() *GeneralSpecMutation {
	return gsu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (gsu *GeneralSpecUpdate) ClearService() *GeneralSpecUpdate {
	gsu.mutation.ClearService()
	return gsu
}

// ClearDatabase clears the "database" edge to the Database entity.
func (gsu *GeneralSpecUpdate) ClearDatabase() *GeneralSpecUpdate {
	gsu.mutation.ClearDatabase()
	return gsu
}

// ClearApispec clears the "apispec" edge to the APISpec entity.
func (gsu *GeneralSpecUpdate) ClearApispec() *GeneralSpecUpdate {
	gsu.mutation.ClearApispec()
	return gsu
}

// ClearProject clears the "project" edge to the Project entity.
func (gsu *GeneralSpecUpdate) ClearProject() *GeneralSpecUpdate {
	gsu.mutation.ClearProject()
	return gsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GeneralSpecUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gsu.sqlSave, gsu.mutation, gsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GeneralSpecUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GeneralSpecUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GeneralSpecUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gsu *GeneralSpecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(generalspec.Table, generalspec.Columns, sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt))
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.UUID(); ok {
		_spec.SetField(generalspec.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := gsu.mutation.Name(); ok {
		_spec.SetField(generalspec.FieldName, field.TypeString, value)
	}
	if value, ok := gsu.mutation.GetType(); ok {
		_spec.SetField(generalspec.FieldType, field.TypeString, value)
	}
	if value, ok := gsu.mutation.Status(); ok {
		_spec.SetField(generalspec.FieldStatus, field.TypeString, value)
	}
	if value, ok := gsu.mutation.Description(); ok {
		_spec.SetField(generalspec.FieldDescription, field.TypeString, value)
	}
	if gsu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ServiceTable,
			Columns: []string{generalspec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ServiceTable,
			Columns: []string{generalspec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsu.mutation.DatabaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.DatabaseTable,
			Columns: []string{generalspec.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.DatabaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.DatabaseTable,
			Columns: []string{generalspec.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsu.mutation.ApispecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ApispecTable,
			Columns: []string{generalspec.ApispecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.ApispecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ApispecTable,
			Columns: []string{generalspec.ApispecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ProjectTable,
			Columns: []string{generalspec.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ProjectTable,
			Columns: []string{generalspec.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generalspec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gsu.mutation.done = true
	return n, nil
}

// GeneralSpecUpdateOne is the builder for updating a single GeneralSpec entity.
type GeneralSpecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GeneralSpecMutation
}

// SetUUID sets the "uuid" field.
func (gsuo *GeneralSpecUpdateOne) SetUUID(u uuid.UUID) *GeneralSpecUpdateOne {
	gsuo.mutation.SetUUID(u)
	return gsuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableUUID(u *uuid.UUID) *GeneralSpecUpdateOne {
	if u != nil {
		gsuo.SetUUID(*u)
	}
	return gsuo
}

// SetName sets the "name" field.
func (gsuo *GeneralSpecUpdateOne) SetName(s string) *GeneralSpecUpdateOne {
	gsuo.mutation.SetName(s)
	return gsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableName(s *string) *GeneralSpecUpdateOne {
	if s != nil {
		gsuo.SetName(*s)
	}
	return gsuo
}

// SetType sets the "type" field.
func (gsuo *GeneralSpecUpdateOne) SetType(s string) *GeneralSpecUpdateOne {
	gsuo.mutation.SetType(s)
	return gsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableType(s *string) *GeneralSpecUpdateOne {
	if s != nil {
		gsuo.SetType(*s)
	}
	return gsuo
}

// SetStatus sets the "status" field.
func (gsuo *GeneralSpecUpdateOne) SetStatus(s string) *GeneralSpecUpdateOne {
	gsuo.mutation.SetStatus(s)
	return gsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableStatus(s *string) *GeneralSpecUpdateOne {
	if s != nil {
		gsuo.SetStatus(*s)
	}
	return gsuo
}

// SetDescription sets the "description" field.
func (gsuo *GeneralSpecUpdateOne) SetDescription(s string) *GeneralSpecUpdateOne {
	gsuo.mutation.SetDescription(s)
	return gsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableDescription(s *string) *GeneralSpecUpdateOne {
	if s != nil {
		gsuo.SetDescription(*s)
	}
	return gsuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (gsuo *GeneralSpecUpdateOne) SetServiceID(id uuid.UUID) *GeneralSpecUpdateOne {
	gsuo.mutation.SetServiceID(id)
	return gsuo
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableServiceID(id *uuid.UUID) *GeneralSpecUpdateOne {
	if id != nil {
		gsuo = gsuo.SetServiceID(*id)
	}
	return gsuo
}

// SetService sets the "service" edge to the Service entity.
func (gsuo *GeneralSpecUpdateOne) SetService(s *Service) *GeneralSpecUpdateOne {
	return gsuo.SetServiceID(s.ID)
}

// SetDatabaseID sets the "database" edge to the Database entity by ID.
func (gsuo *GeneralSpecUpdateOne) SetDatabaseID(id uuid.UUID) *GeneralSpecUpdateOne {
	gsuo.mutation.SetDatabaseID(id)
	return gsuo
}

// SetNillableDatabaseID sets the "database" edge to the Database entity by ID if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableDatabaseID(id *uuid.UUID) *GeneralSpecUpdateOne {
	if id != nil {
		gsuo = gsuo.SetDatabaseID(*id)
	}
	return gsuo
}

// SetDatabase sets the "database" edge to the Database entity.
func (gsuo *GeneralSpecUpdateOne) SetDatabase(d *Database) *GeneralSpecUpdateOne {
	return gsuo.SetDatabaseID(d.ID)
}

// SetApispecID sets the "apispec" edge to the APISpec entity by ID.
func (gsuo *GeneralSpecUpdateOne) SetApispecID(id uuid.UUID) *GeneralSpecUpdateOne {
	gsuo.mutation.SetApispecID(id)
	return gsuo
}

// SetNillableApispecID sets the "apispec" edge to the APISpec entity by ID if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableApispecID(id *uuid.UUID) *GeneralSpecUpdateOne {
	if id != nil {
		gsuo = gsuo.SetApispecID(*id)
	}
	return gsuo
}

// SetApispec sets the "apispec" edge to the APISpec entity.
func (gsuo *GeneralSpecUpdateOne) SetApispec(a *APISpec) *GeneralSpecUpdateOne {
	return gsuo.SetApispecID(a.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (gsuo *GeneralSpecUpdateOne) SetProjectID(id uuid.UUID) *GeneralSpecUpdateOne {
	gsuo.mutation.SetProjectID(id)
	return gsuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (gsuo *GeneralSpecUpdateOne) SetNillableProjectID(id *uuid.UUID) *GeneralSpecUpdateOne {
	if id != nil {
		gsuo = gsuo.SetProjectID(*id)
	}
	return gsuo
}

// SetProject sets the "project" edge to the Project entity.
func (gsuo *GeneralSpecUpdateOne) SetProject(p *Project) *GeneralSpecUpdateOne {
	return gsuo.SetProjectID(p.ID)
}

// Mutation returns the GeneralSpecMutation object of the builder.
func (gsuo *GeneralSpecUpdateOne) Mutation() *GeneralSpecMutation {
	return gsuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (gsuo *GeneralSpecUpdateOne) ClearService() *GeneralSpecUpdateOne {
	gsuo.mutation.ClearService()
	return gsuo
}

// ClearDatabase clears the "database" edge to the Database entity.
func (gsuo *GeneralSpecUpdateOne) ClearDatabase() *GeneralSpecUpdateOne {
	gsuo.mutation.ClearDatabase()
	return gsuo
}

// ClearApispec clears the "apispec" edge to the APISpec entity.
func (gsuo *GeneralSpecUpdateOne) ClearApispec() *GeneralSpecUpdateOne {
	gsuo.mutation.ClearApispec()
	return gsuo
}

// ClearProject clears the "project" edge to the Project entity.
func (gsuo *GeneralSpecUpdateOne) ClearProject() *GeneralSpecUpdateOne {
	gsuo.mutation.ClearProject()
	return gsuo
}

// Where appends a list predicates to the GeneralSpecUpdate builder.
func (gsuo *GeneralSpecUpdateOne) Where(ps ...predicate.GeneralSpec) *GeneralSpecUpdateOne {
	gsuo.mutation.Where(ps...)
	return gsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GeneralSpecUpdateOne) Select(field string, fields ...string) *GeneralSpecUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GeneralSpec entity.
func (gsuo *GeneralSpecUpdateOne) Save(ctx context.Context) (*GeneralSpec, error) {
	return withHooks(ctx, gsuo.sqlSave, gsuo.mutation, gsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GeneralSpecUpdateOne) SaveX(ctx context.Context) *GeneralSpec {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GeneralSpecUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GeneralSpecUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gsuo *GeneralSpecUpdateOne) sqlSave(ctx context.Context) (_node *GeneralSpec, err error) {
	_spec := sqlgraph.NewUpdateSpec(generalspec.Table, generalspec.Columns, sqlgraph.NewFieldSpec(generalspec.FieldID, field.TypeInt))
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GeneralSpec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generalspec.FieldID)
		for _, f := range fields {
			if !generalspec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generalspec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.UUID(); ok {
		_spec.SetField(generalspec.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := gsuo.mutation.Name(); ok {
		_spec.SetField(generalspec.FieldName, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.GetType(); ok {
		_spec.SetField(generalspec.FieldType, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.Status(); ok {
		_spec.SetField(generalspec.FieldStatus, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.Description(); ok {
		_spec.SetField(generalspec.FieldDescription, field.TypeString, value)
	}
	if gsuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ServiceTable,
			Columns: []string{generalspec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ServiceTable,
			Columns: []string{generalspec.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsuo.mutation.DatabaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.DatabaseTable,
			Columns: []string{generalspec.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.DatabaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.DatabaseTable,
			Columns: []string{generalspec.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsuo.mutation.ApispecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ApispecTable,
			Columns: []string{generalspec.ApispecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.ApispecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ApispecTable,
			Columns: []string{generalspec.ApispecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apispec.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ProjectTable,
			Columns: []string{generalspec.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generalspec.ProjectTable,
			Columns: []string{generalspec.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GeneralSpec{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generalspec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gsuo.mutation.done = true
	return _node, nil
}
