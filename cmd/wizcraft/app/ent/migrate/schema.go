// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APISpecsColumns holds the columns for the "api_specs" table.
	APISpecsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "openapi_spec", Type: field.TypeJSON},
		{Name: "project_apispecs", Type: field.TypeUUID, Nullable: true},
		{Name: "service_apispec", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// APISpecsTable holds the schema information for the "api_specs" table.
	APISpecsTable = &schema.Table{
		Name:       "api_specs",
		Columns:    APISpecsColumns,
		PrimaryKey: []*schema.Column{APISpecsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_specs_projects_apispecs",
				Columns:    []*schema.Column{APISpecsColumns[2]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "api_specs_services_apispec",
				Columns:    []*schema.Column{APISpecsColumns[3]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DatabasesColumns holds the columns for the "databases" table.
	DatabasesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "connection_path", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "db_type", Type: field.TypeString},
		{Name: "project_databases", Type: field.TypeUUID, Nullable: true},
		{Name: "service_databases", Type: field.TypeUUID, Nullable: true},
	}
	// DatabasesTable holds the schema information for the "databases" table.
	DatabasesTable = &schema.Table{
		Name:       "databases",
		Columns:    DatabasesColumns,
		PrimaryKey: []*schema.Column{DatabasesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "databases_projects_databases",
				Columns:    []*schema.Column{DatabasesColumns[4]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "databases_services_databases",
				Columns:    []*schema.Column{DatabasesColumns[5]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GeneralSpecsColumns holds the columns for the "general_specs" table.
	GeneralSpecsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "status", Type: field.TypeString, Default: "created"},
		{Name: "description", Type: field.TypeString},
		{Name: "general_spec_service", Type: field.TypeUUID, Nullable: true},
		{Name: "general_spec_database", Type: field.TypeUUID, Nullable: true},
		{Name: "general_spec_apispec", Type: field.TypeUUID, Nullable: true},
		{Name: "general_spec_project", Type: field.TypeUUID, Nullable: true},
	}
	// GeneralSpecsTable holds the schema information for the "general_specs" table.
	GeneralSpecsTable = &schema.Table{
		Name:       "general_specs",
		Columns:    GeneralSpecsColumns,
		PrimaryKey: []*schema.Column{GeneralSpecsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "general_specs_services_service",
				Columns:    []*schema.Column{GeneralSpecsColumns[6]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "general_specs_databases_database",
				Columns:    []*schema.Column{GeneralSpecsColumns[7]},
				RefColumns: []*schema.Column{DatabasesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "general_specs_api_specs_apispec",
				Columns:    []*schema.Column{GeneralSpecsColumns[8]},
				RefColumns: []*schema.Column{APISpecsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "general_specs_projects_project",
				Columns:    []*schema.Column{GeneralSpecsColumns[9]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// ServicesColumns holds the columns for the "services" table.
	ServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "project_services", Type: field.TypeUUID, Nullable: true},
	}
	// ServicesTable holds the schema information for the "services" table.
	ServicesTable = &schema.Table{
		Name:       "services",
		Columns:    ServicesColumns,
		PrimaryKey: []*schema.Column{ServicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "services_projects_services",
				Columns:    []*schema.Column{ServicesColumns[1]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APISpecsTable,
		DatabasesTable,
		GeneralSpecsTable,
		ProjectsTable,
		ServicesTable,
		UsersTable,
	}
)

func init() {
	APISpecsTable.ForeignKeys[0].RefTable = ProjectsTable
	APISpecsTable.ForeignKeys[1].RefTable = ServicesTable
	DatabasesTable.ForeignKeys[0].RefTable = ProjectsTable
	DatabasesTable.ForeignKeys[1].RefTable = ServicesTable
	GeneralSpecsTable.ForeignKeys[0].RefTable = ServicesTable
	GeneralSpecsTable.ForeignKeys[1].RefTable = DatabasesTable
	GeneralSpecsTable.ForeignKeys[2].RefTable = APISpecsTable
	GeneralSpecsTable.ForeignKeys[3].RefTable = ProjectsTable
	ServicesTable.ForeignKeys[0].RefTable = ProjectsTable
}
